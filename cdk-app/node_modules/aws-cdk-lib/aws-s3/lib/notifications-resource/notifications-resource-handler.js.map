{
  "version": 3,
  "sources": ["notifications-resource-handler.ts"],
  "sourcesContent": ["import * as fs from 'fs';\nimport * as path from 'path';\nimport * as iam from '../../../aws-iam';\nimport * as cdk from '../../../core';\nimport { Construct } from 'constructs';\n\nexport class NotificationsResourceHandlerProps {\n  role?: iam.IRole;\n}\n\n/**\n * A Lambda-based custom resource handler that provisions S3 bucket\n * notifications for a bucket.\n *\n * The resource property schema is:\n *\n * {\n *   BucketName: string, NotificationConfiguration: { see\n *   PutBucketNotificationConfiguration }\n * }\n *\n * For 'Delete' operations, we send an empty NotificationConfiguration as\n * required. We propagate errors and results as-is.\n *\n * Sadly, we can't use @aws-cdk/aws-lambda as it will introduce a dependency\n * cycle, so this uses raw `cdk.Resource`s.\n */\nexport class NotificationsResourceHandler extends Construct {\n  /**\n   * Defines a stack-singleton lambda function with the logic for a CloudFormation custom\n   * resource that provisions bucket notification configuration for a bucket.\n   *\n   * @returns The ARN of the custom resource lambda function.\n   */\n  public static singleton(context: Construct, props: NotificationsResourceHandlerProps = {}) {\n    const root = cdk.Stack.of(context);\n\n    // well-known logical id to ensure stack singletonity\n    const logicalId = 'BucketNotificationsHandler050a0587b7544547bf325f094a3db834';\n    let lambda = root.node.tryFindChild(logicalId) as NotificationsResourceHandler;\n    if (!lambda) {\n      lambda = new NotificationsResourceHandler(root, logicalId, props);\n    }\n\n    return lambda;\n  }\n\n  /**\n   * The ARN of the handler's lambda function. Used as a service token in the\n   * custom resource.\n   */\n  public readonly functionArn: string;\n\n  /**\n   * The role of the handler's lambda function.\n   */\n  public readonly role: iam.IRole;\n\n  constructor(scope: Construct, id: string, props: NotificationsResourceHandlerProps = {}) {\n    super(scope, id);\n\n    this.role = props.role ?? new iam.Role(this, 'Role', {\n      assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com'),\n    });\n\n    this.role.addManagedPolicy(\n      iam.ManagedPolicy.fromAwsManagedPolicyName('service-role/AWSLambdaBasicExecutionRole'),\n    );\n    this.role.addToPrincipalPolicy(new iam.PolicyStatement({\n      actions: ['s3:PutBucketNotification'],\n      resources: ['*'],\n    }));\n\n    const resourceType = 'AWS::Lambda::Function';\n    class InLineLambda extends cdk.CfnResource {\n      public readonly tags: cdk.TagManager = new cdk.TagManager(cdk.TagType.STANDARD, resourceType);\n\n      protected renderProperties(properties: any): { [key: string]: any } {\n        properties.Tags = cdk.listMapper(cdk.cfnTagToCloudFormation)(this.tags.renderTags());\n        delete properties.tags;\n        return properties;\n      }\n    }\n\n    const handlerSource = fs.readFileSync(path.join(__dirname, 'lambda/index.py'), 'utf8');\n    if (handlerSource.length > 4096) {\n      throw new Error(`Source of Notifications Resource Handler is too large (${handlerSource.length} > 4096)`);\n    }\n\n    const resource = new InLineLambda(this, 'Resource', {\n      type: resourceType,\n      properties: {\n        Description: 'AWS CloudFormation handler for \"Custom::S3BucketNotifications\" resources (@aws-cdk/aws-s3)',\n        Code: { ZipFile: handlerSource },\n        Handler: 'index.handler',\n        Role: this.role.roleArn,\n        Runtime: 'python3.7',\n        Timeout: 300,\n      },\n    });\n    resource.node.addDependency(this.role);\n\n    this.functionArn = resource.getAtt('Arn').toString();\n  }\n\n  public addToRolePolicy(statement: iam.PolicyStatement) {\n    this.role.addToPrincipalPolicy(statement);\n  }\n}\n"],
  "mappings": "0JAAA,KAAA,IAAA,QAAA,MACA,KAAA,QAAA,QACA,IAAA,QAAA,oBACA,IAAA,QAAA,iBACA,aAAA,QAAA,cAEA,uCAA8C,EAA9C,QAAA,kCAAA,kCAqBA,0CAAkD,cAAA,SAAS,CA+BzD,YAAY,MAAkB,GAAY,MAA2C,GAAE,QACrF,MAAM,MAAO,IAEb,KAAK,KAAI,IAAG,MAAM,QAAI,MAAA,KAAA,OAAA,GAAI,GAAI,KAAI,KAAK,KAAM,OAAQ,CACnD,UAAW,GAAI,KAAI,iBAAiB,0BAGtC,KAAK,KAAK,iBACR,IAAI,cAAc,yBAAyB,6CAE7C,KAAK,KAAK,qBAAqB,GAAI,KAAI,gBAAgB,CACrD,QAAS,CAAC,4BACV,UAAW,CAAC,QAGd,KAAM,cAAe,wBACrB,0BAA2B,KAAI,WAAW,CAA1C,aAAA,qBACkB,KAAA,KAAuB,GAAI,KAAI,WAAW,IAAI,QAAQ,SAAU,cAEtE,iBAAiB,WAAe,CACxC,kBAAW,KAAO,IAAI,WAAW,IAAI,wBAAwB,KAAK,KAAK,cACvE,MAAO,YAAW,KACX,YAIX,KAAM,eAAgB,GAAG,aAAa,KAAK,KAAK,UAAW,mBAAoB,QAC/E,GAAI,cAAc,OAAS,KACzB,KAAM,IAAI,OAAM,0DAA0D,cAAc,kBAG1F,KAAM,UAAW,GAAI,cAAa,KAAM,WAAY,CAClD,KAAM,aACN,WAAY,CACV,YAAa,6FACb,KAAM,CAAE,QAAS,eACjB,QAAS,gBACT,KAAM,KAAK,KAAK,QAChB,QAAS,YACT,QAAS,OAGb,SAAS,KAAK,cAAc,KAAK,MAEjC,KAAK,YAAc,SAAS,OAAO,OAAO,iBApE9B,WAAU,QAAoB,MAA2C,GAAE,CACvF,KAAM,MAAO,IAAI,MAAM,GAAG,SAGpB,UAAY,6DAClB,GAAI,QAAS,KAAK,KAAK,aAAa,WACpC,MAAK,SACH,QAAS,GAAI,8BAA6B,KAAM,UAAW,QAGtD,OA6DF,gBAAgB,UAA8B,CACnD,KAAK,KAAK,qBAAqB,YA/EnC,QAAA,6BAAA",
  "names": []
}
