{
  "version": 3,
  "sources": ["copy.ts"],
  "sourcesContent": ["import * as fs from 'fs';\nimport * as path from 'path';\nimport { IgnoreStrategy } from './ignore';\nimport { CopyOptions, SymlinkFollowMode } from './options';\nimport { shouldFollow } from './utils';\n\nexport function copyDirectory(srcDir: string, destDir: string, options: CopyOptions = { }, rootDir?: string) {\n  const follow = options.follow ?? SymlinkFollowMode.EXTERNAL;\n\n  rootDir = rootDir || srcDir;\n\n  const ignoreStrategy = IgnoreStrategy.fromCopyOptions(options, rootDir);\n\n  if (!fs.statSync(srcDir).isDirectory()) {\n    throw new Error(`${srcDir} is not a directory`);\n  }\n\n  const files = fs.readdirSync(srcDir);\n  for (const file of files) {\n    const sourceFilePath = path.join(srcDir, file);\n\n    if (ignoreStrategy.ignores(sourceFilePath)) {\n      continue;\n    }\n\n    const destFilePath = path.join(destDir, file);\n\n    let stat: fs.Stats | undefined = follow === SymlinkFollowMode.ALWAYS\n      ? fs.statSync(sourceFilePath)\n      : fs.lstatSync(sourceFilePath);\n\n    if (stat && stat.isSymbolicLink()) {\n      const target = fs.readlinkSync(sourceFilePath);\n\n      // determine if this is an external link (i.e. the target's absolute path\n      // is outside of the root directory).\n      const targetPath = path.normalize(path.resolve(srcDir, target));\n\n      if (shouldFollow(follow, rootDir, targetPath)) {\n        stat = fs.statSync(sourceFilePath);\n      } else {\n        fs.symlinkSync(target, destFilePath);\n        stat = undefined;\n      }\n    }\n\n    if (stat && stat.isDirectory()) {\n      fs.mkdirSync(destFilePath);\n      copyDirectory(sourceFilePath, destFilePath, options, rootDir);\n      stat = undefined;\n    }\n\n    if (stat && stat.isFile()) {\n      fs.copyFileSync(sourceFilePath, destFilePath);\n      stat = undefined;\n    }\n  }\n}\n"],
  "mappings": "iGAAA,KAAA,IAAA,QAAA,MACA,KAAA,QAAA,QACA,SAAA,QAAA,YACA,UAAA,QAAA,aACA,QAAA,QAAA,WAEA,uBAA8B,OAAgB,QAAiB,QAAuB,GAAK,QAAgB,QACzG,KAAM,QAAM,IAAG,QAAQ,UAAM,MAAA,KAAA,OAAA,GAAI,UAAA,kBAAkB,SAEnD,QAAU,SAAW,OAErB,KAAM,gBAAiB,SAAA,eAAe,gBAAgB,QAAS,SAE/D,GAAI,CAAC,GAAG,SAAS,QAAQ,cACvB,KAAM,IAAI,OAAM,GAAG,6BAGrB,KAAM,OAAQ,GAAG,YAAY,QAC7B,SAAW,QAAQ,OAAO,CACxB,KAAM,gBAAiB,KAAK,KAAK,OAAQ,MAEzC,GAAI,eAAe,QAAQ,gBACzB,SAGF,KAAM,cAAe,KAAK,KAAK,QAAS,MAExC,GAAI,MAA6B,SAAW,UAAA,kBAAkB,OAC1D,GAAG,SAAS,gBACZ,GAAG,UAAU,gBAEjB,GAAI,MAAQ,KAAK,iBAAkB,CACjC,KAAM,QAAS,GAAG,aAAa,gBAIzB,WAAa,KAAK,UAAU,KAAK,QAAQ,OAAQ,SAEvD,AAAI,QAAA,aAAa,OAAQ,QAAS,YAChC,KAAO,GAAG,SAAS,gBAEnB,IAAG,YAAY,OAAQ,cACvB,KAAO,QAIX,AAAI,MAAQ,KAAK,eACf,IAAG,UAAU,cACb,cAAc,eAAgB,aAAc,QAAS,SACrD,KAAO,QAGL,MAAQ,KAAK,UACf,IAAG,aAAa,eAAgB,cAChC,KAAO,SAhDb,QAAA,cAAA",
  "names": []
}
