{
  "version": 3,
  "sources": ["cfn-pseudo.ts"],
  "sourcesContent": ["import { Construct } from 'constructs';\nimport { CfnReference } from './private/cfn-reference';\nimport { Token } from './token';\n\nconst AWS_ACCOUNTID = 'AWS::AccountId';\nconst AWS_URLSUFFIX = 'AWS::URLSuffix';\nconst AWS_NOTIFICATIONARNS = 'AWS::NotificationARNs';\nconst AWS_PARTITION = 'AWS::Partition';\nconst AWS_REGION = 'AWS::Region';\nconst AWS_STACKID = 'AWS::StackId';\nconst AWS_STACKNAME = 'AWS::StackName';\nconst AWS_NOVALUE = 'AWS::NoValue';\n\n/**\n * Accessor for pseudo parameters\n *\n * Since pseudo parameters need to be anchored to a stack somewhere in the\n * construct tree, this class takes an scope parameter; the pseudo parameter\n * values can be obtained as properties from an scoped object.\n */\nexport class Aws {\n  public static readonly ACCOUNT_ID = pseudoString(AWS_ACCOUNTID);\n  public static readonly URL_SUFFIX = pseudoString(AWS_URLSUFFIX);\n  public static readonly NOTIFICATION_ARNS = Token.asList({ Ref: AWS_NOTIFICATIONARNS }, { displayHint: AWS_NOTIFICATIONARNS });\n  public static readonly PARTITION = pseudoString(AWS_PARTITION);\n  public static readonly REGION = pseudoString(AWS_REGION);\n  public static readonly STACK_ID = pseudoString(AWS_STACKID);\n  public static readonly STACK_NAME = pseudoString(AWS_STACKNAME);\n  public static readonly NO_VALUE = pseudoString(AWS_NOVALUE);\n\n  private constructor() { }\n}\n\n/**\n * Accessor for scoped pseudo parameters\n *\n * These pseudo parameters are anchored to a stack somewhere in the construct\n * tree, and their values will be exported automatically.\n */\nexport class ScopedAws {\n  constructor(private readonly scope: Construct) {\n  }\n\n  public get accountId(): string {\n    return this.asString(AWS_ACCOUNTID);\n  }\n\n  public get urlSuffix(): string {\n    return this.asString(AWS_URLSUFFIX);\n  }\n\n  public get notificationArns(): string[] {\n    return Token.asList(CfnReference.forPseudo(AWS_NOTIFICATIONARNS, this.scope), {\n      displayHint: AWS_NOTIFICATIONARNS,\n    });\n  }\n\n  public get partition(): string {\n    return this.asString(AWS_PARTITION);\n  }\n\n  public get region(): string {\n    return this.asString(AWS_REGION);\n  }\n\n  public get stackId(): string {\n    return this.asString(AWS_STACKID);\n  }\n\n  public get stackName(): string {\n    return this.asString(AWS_STACKNAME);\n  }\n\n  private asString(name: string) {\n    return Token.asString(CfnReference.forPseudo(name, this.scope), { displayHint: name });\n  }\n}\n\nfunction pseudoString(name: string): string {\n  // we don't want any ':' in the serialized form,\n  // as ':' is the ARN separator,\n  // and so we don't want ARN components\n  // (which these CFN references like AWS::Partition certainly can be)\n  // to contain ':'s themselves\n  return Token.asString({ Ref: name }, { displayHint: name.replace('::', '.') });\n}\n"],
  "mappings": "oKACA,gBAAA,QAAA,2BACA,QAAA,QAAA,WAEM,cAAgB,iBAChB,cAAgB,iBAChB,qBAAuB,wBACvB,cAAgB,iBAChB,WAAa,cACb,YAAc,eACd,cAAgB,iBAChB,YAAc,eASpB,SAAgB,CAUd,aAAA,GAVF,QAAA,IAAA,2EACyB,IAAA,WAAa,aAAa,eAC1B,IAAA,WAAa,aAAa,eAC1B,IAAA,kBAAoB,QAAA,MAAM,OAAO,CAAE,IAAK,sBAAwB,CAAE,YAAa,uBAC/E,IAAA,UAAY,aAAa,eACzB,IAAA,OAAS,aAAa,YACtB,IAAA,SAAW,aAAa,aACxB,IAAA,WAAa,aAAa,eAC1B,IAAA,SAAW,aAAa,aAWjD,eAAsB,CACpB,YAA6B,MAAgB,CAAhB,KAAA,MAAA,SAGlB,YAAS,CAClB,MAAO,MAAK,SAAS,kBAGZ,YAAS,CAClB,MAAO,MAAK,SAAS,kBAGZ,mBAAgB,CACzB,MAAO,SAAA,MAAM,OAAO,gBAAA,aAAa,UAAU,qBAAsB,KAAK,OAAQ,CAC5E,YAAa,0BAIN,YAAS,CAClB,MAAO,MAAK,SAAS,kBAGZ,SAAM,CACf,MAAO,MAAK,SAAS,eAGZ,UAAO,CAChB,MAAO,MAAK,SAAS,gBAGZ,YAAS,CAClB,MAAO,MAAK,SAAS,eAGf,SAAS,KAAY,CAC3B,MAAO,SAAA,MAAM,SAAS,gBAAA,aAAa,UAAU,KAAM,KAAK,OAAQ,CAAE,YAAa,QAnCnF,QAAA,UAAA,6FAuCA,sBAAsB,KAAY,CAMhC,MAAO,SAAA,MAAM,SAAS,CAAE,IAAK,MAAQ,CAAE,YAAa,KAAK,QAAQ,KAAM",
  "names": []
}
