{
  "version": 3,
  "sources": ["ecs-task.ts"],
  "sourcesContent": ["import * as ec2 from '../../aws-ec2';\nimport * as ecs from '../../aws-ecs';\nimport * as events from '../../aws-events';\nimport * as iam from '../../aws-iam';\nimport * as cdk from '../../core';\nimport { ContainerOverride } from './ecs-task-properties';\nimport { singletonEventRole } from './util';\n\n// keep this import separate from other imports to reduce chance for merge conflicts with v2-main\n// eslint-disable-next-line no-duplicate-imports, import/order\nimport { Construct } from 'constructs';\n\n/**\n * Properties to define an ECS Event Task\n */\nexport interface EcsTaskProps {\n  /**\n   * Cluster where service will be deployed\n   */\n  readonly cluster: ecs.ICluster;\n\n  /**\n   * Task Definition of the task that should be started\n   */\n  readonly taskDefinition: ecs.ITaskDefinition;\n\n  /**\n   * How many tasks should be started when this event is triggered\n   *\n   * @default 1\n   */\n  readonly taskCount?: number;\n\n  /**\n   * Container setting overrides\n   *\n   * Key is the name of the container to override, value is the\n   * values you want to override.\n   */\n  readonly containerOverrides?: ContainerOverride[];\n\n  /**\n   * In what subnets to place the task's ENIs\n   *\n   * (Only applicable in case the TaskDefinition is configured for AwsVpc networking)\n   *\n   * @default Private subnets\n   */\n  readonly subnetSelection?: ec2.SubnetSelection;\n\n  /**\n   * Existing security group to use for the task's ENIs\n   *\n   * (Only applicable in case the TaskDefinition is configured for AwsVpc networking)\n   *\n   * @default A new security group is created\n   * @deprecated use securityGroups instead\n   */\n  readonly securityGroup?: ec2.ISecurityGroup;\n\n  /**\n   * Existing security groups to use for the task's ENIs\n   *\n   * (Only applicable in case the TaskDefinition is configured for AwsVpc networking)\n   *\n   * @default A new security group is created\n   */\n  readonly securityGroups?: ec2.ISecurityGroup[];\n\n  /**\n   * Existing IAM role to run the ECS task\n   *\n   * @default A new IAM role is created\n   */\n  readonly role?: iam.IRole;\n\n  /**\n   * The platform version on which to run your task\n   *\n   * Unless you have specific compatibility requirements, you don't need to specify this.\n   *\n   * @see https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html\n   *\n   * @default - ECS will set the Fargate platform version to 'LATEST'\n   */\n  readonly platformVersion?: ecs.FargatePlatformVersion;\n}\n\n/**\n * Start a task on an ECS cluster\n */\nexport class EcsTask implements events.IRuleTarget {\n  // Security group fields are public because we can generate a new security group if none is provided.\n\n  /**\n   * The security group associated with the task. Only applicable with awsvpc network mode.\n   *\n   * @default - A new security group is created.\n   * @deprecated use securityGroups instead.\n   */\n  public readonly securityGroup?: ec2.ISecurityGroup;\n\n  /**\n   * The security groups associated with the task. Only applicable with awsvpc network mode.\n   *\n   * @default - A new security group is created.\n   */\n  public readonly securityGroups?: ec2.ISecurityGroup[];\n  private readonly cluster: ecs.ICluster;\n  private readonly taskDefinition: ecs.ITaskDefinition;\n  private readonly taskCount: number;\n  private readonly role: iam.IRole;\n  private readonly platformVersion?: ecs.FargatePlatformVersion;\n\n  constructor(private readonly props: EcsTaskProps) {\n    if (props.securityGroup !== undefined && props.securityGroups !== undefined) {\n      throw new Error('Only one of SecurityGroup or SecurityGroups can be populated.');\n    }\n\n    this.cluster = props.cluster;\n    this.taskDefinition = props.taskDefinition;\n    this.taskCount = props.taskCount ?? 1;\n    this.platformVersion = props.platformVersion;\n\n    if (props.role) {\n      const role = props.role;\n      this.createEventRolePolicyStatements().forEach(role.addToPrincipalPolicy.bind(role));\n      this.role = role;\n    } else {\n      this.role = singletonEventRole(this.taskDefinition, this.createEventRolePolicyStatements());\n    }\n\n    // Security groups are only configurable with the \"awsvpc\" network mode.\n    if (this.taskDefinition.networkMode !== ecs.NetworkMode.AWS_VPC) {\n      if (props.securityGroup !== undefined || props.securityGroups !== undefined) {\n        cdk.Annotations.of(this.taskDefinition).addWarning('security groups are ignored when network mode is not awsvpc');\n      }\n      return;\n    }\n    if (props.securityGroups) {\n      this.securityGroups = props.securityGroups;\n      return;\n    }\n\n    if (!Construct.isConstruct(this.taskDefinition)) {\n      throw new Error('Cannot create a security group for ECS task. ' +\n        'The task definition in ECS task is not a Construct. ' +\n        'Please pass a taskDefinition as a Construct in EcsTaskProps.');\n    }\n\n    let securityGroup = props.securityGroup || this.taskDefinition.node.tryFindChild('SecurityGroup') as ec2.ISecurityGroup;\n    securityGroup = securityGroup || new ec2.SecurityGroup(this.taskDefinition, 'SecurityGroup', { vpc: this.props.cluster.vpc });\n    this.securityGroup = securityGroup; // Maintain backwards-compatibility for customers that read the generated security group.\n    this.securityGroups = [securityGroup];\n  }\n\n  /**\n   * Allows using tasks as target of EventBridge events\n   */\n  public bind(_rule: events.IRule, _id?: string): events.RuleTargetConfig {\n    const arn = this.cluster.clusterArn;\n    const role = this.role;\n    const containerOverrides = this.props.containerOverrides && this.props.containerOverrides\n      .map(({ containerName, ...overrides }) => ({ name: containerName, ...overrides }));\n    const input = { containerOverrides };\n    const taskCount = this.taskCount;\n    const taskDefinitionArn = this.taskDefinition.taskDefinitionArn;\n\n    const subnetSelection = this.props.subnetSelection || { subnetType: ec2.SubnetType.PRIVATE };\n    const assignPublicIp = subnetSelection.subnetType === ec2.SubnetType.PUBLIC ? 'ENABLED' : 'DISABLED';\n\n    const baseEcsParameters = { taskCount, taskDefinitionArn };\n\n    const ecsParameters: events.CfnRule.EcsParametersProperty = this.taskDefinition.networkMode === ecs.NetworkMode.AWS_VPC\n      ? {\n        ...baseEcsParameters,\n        launchType: this.taskDefinition.isEc2Compatible ? 'EC2' : 'FARGATE',\n        platformVersion: this.platformVersion,\n        networkConfiguration: {\n          awsVpcConfiguration: {\n            subnets: this.props.cluster.vpc.selectSubnets(subnetSelection).subnetIds,\n            assignPublicIp,\n            securityGroups: this.securityGroups && this.securityGroups.map(sg => sg.securityGroupId),\n          },\n        },\n      }\n      : baseEcsParameters;\n\n    return {\n      arn,\n      role,\n      ecsParameters,\n      input: events.RuleTargetInput.fromObject(input),\n      targetResource: this.taskDefinition,\n    };\n  }\n\n  private createEventRolePolicyStatements(): iam.PolicyStatement[] {\n    const policyStatements = [new iam.PolicyStatement({\n      actions: ['ecs:RunTask'],\n      resources: [this.taskDefinition.taskDefinitionArn],\n      conditions: {\n        ArnEquals: { 'ecs:cluster': this.cluster.clusterArn },\n      },\n    })];\n\n    // If it so happens that a Task Execution Role was created for the TaskDefinition,\n    // then the EventBridge Role must have permissions to pass it (otherwise it doesn't).\n    if (this.taskDefinition.executionRole !== undefined) {\n      policyStatements.push(new iam.PolicyStatement({\n        actions: ['iam:PassRole'],\n        resources: [this.taskDefinition.executionRole.roleArn],\n      }));\n    }\n\n    // For Fargate task we need permission to pass the task role.\n    if (this.taskDefinition.isFargateCompatible) {\n      policyStatements.push(new iam.PolicyStatement({\n        actions: ['iam:PassRole'],\n        resources: [this.taskDefinition.taskRole.roleArn],\n      }));\n    }\n\n    return policyStatements;\n  }\n}\n"],
  "mappings": "8MAAA,IAAA,QAAA,iBACA,IAAA,QAAA,iBACA,OAAA,QAAA,oBACA,IAAA,QAAA,iBACA,IAAA,QAAA,cAEA,OAAA,QAAA,UAIA,aAAA,QAAA,cAiFA,aAAoB,CAuBlB,YAA6B,MAAmB,QAC9C,GAD2B,KAAA,MAAA,iFACvB,MAAM,gBAAkB,QAAa,MAAM,iBAAmB,OAChE,KAAM,IAAI,OAAM,iEAQlB,GALA,KAAK,QAAU,MAAM,QACrB,KAAK,eAAiB,MAAM,eAC5B,KAAK,UAAS,IAAG,MAAM,aAAS,MAAA,KAAA,OAAA,GAAI,EACpC,KAAK,gBAAkB,MAAM,gBAEzB,MAAM,KAAM,CACd,KAAM,MAAO,MAAM,KACnB,KAAK,kCAAkC,QAAQ,KAAK,qBAAqB,KAAK,OAC9E,KAAK,KAAO,SAEZ,MAAK,KAAO,OAAA,mBAAmB,KAAK,eAAgB,KAAK,mCAI3D,GAAI,KAAK,eAAe,cAAgB,IAAI,YAAY,QAAS,CAC/D,AAAI,OAAM,gBAAkB,QAAa,MAAM,iBAAmB,SAChE,IAAI,YAAY,GAAG,KAAK,gBAAgB,WAAW,+DAErD,OAEF,GAAI,MAAM,eAAgB,CACxB,KAAK,eAAiB,MAAM,eAC5B,OAGF,GAAI,CAAC,aAAA,UAAU,YAAY,KAAK,gBAC9B,KAAM,IAAI,OAAM,iKAKlB,GAAI,eAAgB,MAAM,eAAiB,KAAK,eAAe,KAAK,aAAa,iBACjF,cAAgB,eAAiB,GAAI,KAAI,cAAc,KAAK,eAAgB,gBAAiB,CAAE,IAAK,KAAK,MAAM,QAAQ,MACvH,KAAK,cAAgB,cACrB,KAAK,eAAiB,CAAC,eAMlB,KAAK,MAAqB,IAAY,6DAC3C,KAAM,KAAM,KAAK,QAAQ,WACnB,KAAO,KAAK,KAGZ,MAAQ,CAAE,mBAFW,KAAK,MAAM,oBAAsB,KAAK,MAAM,mBACpE,IAAI,CAAC,CAAE,iBAAkB,aAAiB,EAAE,KAAM,iBAAkB,cAEjE,UAAY,KAAK,UACjB,kBAAoB,KAAK,eAAe,kBAExC,gBAAkB,KAAK,MAAM,iBAAmB,CAAE,WAAY,IAAI,WAAW,SAC7E,eAAiB,gBAAgB,aAAe,IAAI,WAAW,OAAS,UAAY,WAEpF,kBAAoB,CAAE,UAAW,mBAEjC,cAAsD,KAAK,eAAe,cAAgB,IAAI,YAAY,QAC5G,IACG,kBACH,WAAY,KAAK,eAAe,gBAAkB,MAAQ,UAC1D,gBAAiB,KAAK,gBACtB,qBAAsB,CACpB,oBAAqB,CACnB,QAAS,KAAK,MAAM,QAAQ,IAAI,cAAc,iBAAiB,UAC/D,eACA,eAAgB,KAAK,gBAAkB,KAAK,eAAe,IAAI,IAAM,GAAG,oBAI5E,kBAEJ,MAAO,CACL,IACA,KACA,cACA,MAAO,OAAO,gBAAgB,WAAW,OACzC,eAAgB,KAAK,gBAIjB,iCAA+B,CACrC,KAAM,kBAAmB,CAAC,GAAI,KAAI,gBAAgB,CAChD,QAAS,CAAC,eACV,UAAW,CAAC,KAAK,eAAe,mBAChC,WAAY,CACV,UAAW,CAAE,cAAe,KAAK,QAAQ,gBAM7C,MAAI,MAAK,eAAe,gBAAkB,QACxC,iBAAiB,KAAK,GAAI,KAAI,gBAAgB,CAC5C,QAAS,CAAC,gBACV,UAAW,CAAC,KAAK,eAAe,cAAc,YAK9C,KAAK,eAAe,qBACtB,iBAAiB,KAAK,GAAI,KAAI,gBAAgB,CAC5C,QAAS,CAAC,gBACV,UAAW,CAAC,KAAK,eAAe,SAAS,YAItC,kBApIX,QAAA,QAAA",
  "names": []
}
