{
  "version": 3,
  "sources": ["sns-augmentations.generated.ts"],
  "sourcesContent": ["// Copyright 2012-2022 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n\n/* eslint-disable max-len */ // This is generated code - line lengths are difficult to control\nimport * as cloudwatch from '../../aws-cloudwatch';\nimport { TopicBase } from \"./topic-base\";\ndeclare module \"./topic-base\" {\n    interface ITopic {\n        /**\n         * Return the given named metric for this Topic\n         */\n        metric(metricName: string, props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * Metric for the size of messages published through this topic\n         *\n         * Average over 5 minutes\n         */\n        metricPublishSize(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The number of messages published to your Amazon SNS topics.\n         *\n         * Sum over 5 minutes\n         */\n        metricNumberOfMessagesPublished(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The number of messages successfully delivered from your Amazon SNS topics to subscribing endpoints.\n         *\n         * Sum over 5 minutes\n         */\n        metricNumberOfNotificationsDelivered(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The number of messages that Amazon SNS failed to deliver.\n         *\n         * Sum over 5 minutes\n         */\n        metricNumberOfNotificationsFailed(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The number of messages that were rejected by subscription filter policies.\n         *\n         * Sum over 5 minutes\n         */\n        metricNumberOfNotificationsFilteredOut(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The number of messages that were rejected by subscription filter policies because the messages have no attributes.\n         *\n         * Sum over 5 minutes\n         */\n        metricNumberOfNotificationsFilteredOutNoMessageAttributes(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The number of messages that were rejected by subscription filter policies because the messages' attributes are invalid\n         *\n         * Sum over 5 minutes\n         */\n        metricNumberOfNotificationsFilteredOutInvalidAttributes(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The charges you have accrued since the start of the current calendar month for sending SMS messages.\n         *\n         * Maximum over 5 minutes\n         */\n        metricSMSMonthToDateSpentUSD(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The rate of successful SMS message deliveries.\n         *\n         * Sum over 5 minutes\n         */\n        metricSMSSuccessRate(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n    }\n    interface TopicBase {\n        /**\n         * Return the given named metric for this Topic\n         */\n        metric(metricName: string, props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * Metric for the size of messages published through this topic\n         *\n         * Average over 5 minutes\n         */\n        metricPublishSize(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The number of messages published to your Amazon SNS topics.\n         *\n         * Sum over 5 minutes\n         */\n        metricNumberOfMessagesPublished(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The number of messages successfully delivered from your Amazon SNS topics to subscribing endpoints.\n         *\n         * Sum over 5 minutes\n         */\n        metricNumberOfNotificationsDelivered(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The number of messages that Amazon SNS failed to deliver.\n         *\n         * Sum over 5 minutes\n         */\n        metricNumberOfNotificationsFailed(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The number of messages that were rejected by subscription filter policies.\n         *\n         * Sum over 5 minutes\n         */\n        metricNumberOfNotificationsFilteredOut(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The number of messages that were rejected by subscription filter policies because the messages have no attributes.\n         *\n         * Sum over 5 minutes\n         */\n        metricNumberOfNotificationsFilteredOutNoMessageAttributes(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The number of messages that were rejected by subscription filter policies because the messages' attributes are invalid\n         *\n         * Sum over 5 minutes\n         */\n        metricNumberOfNotificationsFilteredOutInvalidAttributes(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The charges you have accrued since the start of the current calendar month for sending SMS messages.\n         *\n         * Maximum over 5 minutes\n         */\n        metricSMSMonthToDateSpentUSD(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n        /**\n         * The rate of successful SMS message deliveries.\n         *\n         * Sum over 5 minutes\n         */\n        metricSMSSuccessRate(props?: cloudwatch.MetricOptions): cloudwatch.Metric;\n    }\n}\nTopicBase.prototype.metric = function(metricName: string, props?: cloudwatch.MetricOptions) {\n  return new cloudwatch.Metric({\n    namespace: 'AWS/SNS',\n    metricName,\n    dimensionsMap: { TopicName: this.topicName },\n    ...props\n  }).attachTo(this);\n};\nTopicBase.prototype.metricPublishSize = function(props?: cloudwatch.MetricOptions) {\n  return this.metric('PublishSize', { statistic: 'Average', ...props });\n};\nTopicBase.prototype.metricNumberOfMessagesPublished = function(props?: cloudwatch.MetricOptions) {\n  return this.metric('NumberOfMessagesPublished', { statistic: 'Sum', ...props });\n};\nTopicBase.prototype.metricNumberOfNotificationsDelivered = function(props?: cloudwatch.MetricOptions) {\n  return this.metric('NumberOfNotificationsDelivered', { statistic: 'Sum', ...props });\n};\nTopicBase.prototype.metricNumberOfNotificationsFailed = function(props?: cloudwatch.MetricOptions) {\n  return this.metric('NumberOfNotificationsFailed', { statistic: 'Sum', ...props });\n};\nTopicBase.prototype.metricNumberOfNotificationsFilteredOut = function(props?: cloudwatch.MetricOptions) {\n  return this.metric('NumberOfNotificationsFilteredOut', { statistic: 'Sum', ...props });\n};\nTopicBase.prototype.metricNumberOfNotificationsFilteredOutNoMessageAttributes = function(props?: cloudwatch.MetricOptions) {\n  return this.metric('NumberOfNotificationsFilteredOut-NoMessageAttributes', { statistic: 'Sum', ...props });\n};\nTopicBase.prototype.metricNumberOfNotificationsFilteredOutInvalidAttributes = function(props?: cloudwatch.MetricOptions) {\n  return this.metric('NumberOfNotificationsFilteredOut-InvalidAttributes', { statistic: 'Sum', ...props });\n};\nTopicBase.prototype.metricSMSMonthToDateSpentUSD = function(props?: cloudwatch.MetricOptions) {\n  return this.metric('SMSMonthToDateSpentUSD', { statistic: 'Maximum', ...props });\n};\nTopicBase.prototype.metricSMSSuccessRate = function(props?: cloudwatch.MetricOptions) {\n  return this.metric('SMSSuccessRate', { statistic: 'Sum', ...props });\n};\n"],
  "mappings": "oEAGA,KAAA,YAAA,QAAA,wBACA,aAAA,QAAA,gBA2HA,aAAA,UAAU,UAAU,OAAS,SAAS,WAAoB,MAAgC,CACxF,MAAO,IAAI,YAAW,OAAO,CAC3B,UAAW,UACX,WACA,cAAe,CAAE,UAAW,KAAK,cAC9B,QACF,SAAS,OAEd,aAAA,UAAU,UAAU,kBAAoB,SAAS,MAAgC,CAC/E,MAAO,MAAK,OAAO,cAAe,CAAE,UAAW,aAAc,SAE/D,aAAA,UAAU,UAAU,gCAAkC,SAAS,MAAgC,CAC7F,MAAO,MAAK,OAAO,4BAA6B,CAAE,UAAW,SAAU,SAEzE,aAAA,UAAU,UAAU,qCAAuC,SAAS,MAAgC,CAClG,MAAO,MAAK,OAAO,iCAAkC,CAAE,UAAW,SAAU,SAE9E,aAAA,UAAU,UAAU,kCAAoC,SAAS,MAAgC,CAC/F,MAAO,MAAK,OAAO,8BAA+B,CAAE,UAAW,SAAU,SAE3E,aAAA,UAAU,UAAU,uCAAyC,SAAS,MAAgC,CACpG,MAAO,MAAK,OAAO,mCAAoC,CAAE,UAAW,SAAU,SAEhF,aAAA,UAAU,UAAU,0DAA4D,SAAS,MAAgC,CACvH,MAAO,MAAK,OAAO,uDAAwD,CAAE,UAAW,SAAU,SAEpG,aAAA,UAAU,UAAU,wDAA0D,SAAS,MAAgC,CACrH,MAAO,MAAK,OAAO,qDAAsD,CAAE,UAAW,SAAU,SAElG,aAAA,UAAU,UAAU,6BAA+B,SAAS,MAAgC,CAC1F,MAAO,MAAK,OAAO,yBAA0B,CAAE,UAAW,aAAc,SAE1E,aAAA,UAAU,UAAU,qBAAuB,SAAS,MAAgC,CAClF,MAAO,MAAK,OAAO,iBAAkB,CAAE,UAAW,SAAU",
  "names": []
}
