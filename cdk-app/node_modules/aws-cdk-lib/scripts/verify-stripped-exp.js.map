{
  "version": 3,
  "sources": ["verify-stripped-exp.ts"],
  "sourcesContent": ["// +------------------------------------------------------------------------------------------------\n// | this script is executed post packaging to verify that experimental modules in aws-cdk-lib includes **only**  L1 autogenerated files.\n// | The purpose is to avoid publishing L2 of experimental modules with aws-cdk-lib\n// |\nimport { spawnSync } from 'child_process';\nimport * as console from 'console';\nimport * as os from 'os';\nimport * as path from 'path';\nimport * as fs from 'fs-extra';\n\nasync function main(tempDir: string) {\n  console.log('\uD83E\uDDD0 Verifying all experimental modules includes only L1s files...');\n  const cwd = process.cwd();\n  const awsCdkModulesRepoPath = path.join(findWorkspacePath(), 'packages', '@aws-cdk');\n  // eslint-disable-next-line @typescript-eslint/no-require-imports\n  const version = require('./../package.json').version;\n  const tarFullPath = path.join(cwd, 'dist', 'js', `aws-cdk-lib@${version}.jsii.tgz`);\n\n  const invalidCfnModules = new Map<string, Array<String>>();\n  const invalidModules = new Array<string>();\n\n  // install the tarball in a temp directory\n  console.log(`installing aws-cdk-lib from dist/js into ${tempDir}`);\n  exec('npm', ['install', '--prefix', tempDir, tarFullPath]);\n  const installedAwsCdkLibPath = path.join(tempDir, 'node_modules', 'aws-cdk-lib', 'lib');\n\n  for (const module of fs.readdirSync(awsCdkModulesRepoPath)) {\n    // eslint-disable-next-line @typescript-eslint/no-require-imports\n    const pkgJson = require(path.join(awsCdkModulesRepoPath, module, 'package.json'));\n    if (pkgJson.stability !== 'experimental') {\n      continue;\n    }\n    if (pkgJson['cdk-build']?.cloudformation) {\n      // if a cfn module, verify only the allowed files exists\n      const files = await listAllFiles(path.join(installedAwsCdkLibPath, module));\n      const invalidFiles = new Array();\n      files.forEach(file => {\n        if (!isAllowedFile(file)) {\n          invalidFiles.push(file);\n        }\n      });\n      if (invalidFiles.length > 0) {\n        invalidCfnModules.set(module, invalidFiles);\n      }\n    } else {\n      // not a cfn module, verify it was entirely removed\n      if (fs.existsSync(path.join(installedAwsCdkLibPath, module))) {\n        invalidModules.push(module);\n      }\n    }\n  }\n\n  if (invalidCfnModules.size > 0 || invalidModules.length > 0) {\n    if (invalidCfnModules.size > 0 ) {\n      console.log('cfn module with invalid files:');\n      for (let [module, files] of invalidCfnModules.entries()) {\n        console.log(`${module}:`);\n        files.forEach(file => console.log(`\\t ${file}`));\n      }\n    }\n    console.log('---------------------------------------------');\n    if (invalidModules.length > 0) {\n      console.log('non-cfn experimental modules:');\n      invalidModules.forEach(m => console.log(`\\t ${m}`));\n    }\n    throw new Error('Verification Error');\n  }\n}\n\nconst tempDir = fs.mkdtempSync(os.tmpdir());\n\nmain(tempDir).then(\n  () => {\n    fs.removeSync(tempDir);\n    console.log('\u2705 All experimental modules includes only L1s files!');\n    process.exit(0);\n  },\n  (err) => {\n    process.stderr.write(`${err}\\n`);\n    process.stderr.write(`\u274C Verification failed, Some experimental modules includes non L1 files, see details above. Inspect working directory: '${tempDir}'`);\n    process.exit(1);\n  },\n);\n\n\n/**\n * Spawn sync with error handling\n */\nfunction exec(cmd: string, args: string[]) {\n  const proc = spawnSync(cmd, args);\n\n  if (proc.error) {\n    throw proc.error;\n  }\n\n  if (proc.status !== 0) {\n    if (proc.stdout || proc.stderr) {\n      throw new Error(`${cmd} exited with status ${proc.status}; stdout: ${proc.stdout?.toString().trim()}\\n\\n\\nstderr: ${proc.stderr?.toString().trim()}`);\n    }\n    throw new Error(`${cmd} exited with status ${proc.status}`);\n  }\n\n  return proc;\n}\n\nconst GENERATED_SUFFIX_REGEX = new RegExp(/generated\\.(js|d\\.ts)$/);\nconst ALLOWED_FILES = ['.jsiirc.json', 'index.ts', 'index.js', 'index.d.ts'];\n\n/**\n * Recursively collect all files in dir\n */\nasync function listAllFiles(dir: string) {\n  const ret = new Array();\n\n  async function recurse(part: string) {\n    const files = await fs.readdir(part);\n    for (const file of files) {\n      const fullPath = path.join(part, file);\n      if ((await fs.stat(fullPath)).isDirectory()) {\n        await recurse(fullPath);\n      } else {\n        ret.push(file);\n      }\n    }\n  }\n  await recurse(dir);\n  return ret;\n}\n\n/**\n * Find the workspace root path. Walk up the directory tree until you find lerna.json\n */\nfunction findWorkspacePath() {\n\n  return _findRootPath(process.cwd());\n\n  function _findRootPath(part: string): string {\n    if (part === path.resolve(part, '..')) {\n      throw new Error('couldn\\'t find a \\'lerna.json\\' file when walking up the directory tree, are you in a aws-cdk project?');\n    }\n\n    if (fs.existsSync(path.resolve(part, 'lerna.json'))) {\n      return part;\n    }\n    return _findRootPath(path.resolve(part, '..'));\n  }\n}\n\n/**\n * @param file\n * @returns true if the file allowed in an L1 only modules, otherwise false\n */\nfunction isAllowedFile(file: string) {\n  if (GENERATED_SUFFIX_REGEX.test(file)) {\n    return true;\n  }\n  return ALLOWED_FILES.includes(file);\n}"],
  "mappings": "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",
  "names": []
}
