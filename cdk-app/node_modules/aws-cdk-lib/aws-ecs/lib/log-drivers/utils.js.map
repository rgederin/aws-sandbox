{
  "version": 3,
  "sources": ["utils.ts"],
  "sourcesContent": ["import { Duration, SecretValue, Token } from '../../../core';\nimport { TaskDefinition } from '../base/task-definition';\nimport { Secret } from '../container-definition';\nimport { CfnTaskDefinition } from '../ecs.generated';\nimport { BaseLogDriverProps } from './base-log-driver';\n\n/**\n * Remove undefined values from a dictionary\n */\nexport function removeEmpty<T>(x: { [key: string]: (T | undefined | string) }): { [key: string]: string } {\n  for (const key of Object.keys(x)) {\n    if (x[key] === undefined) {\n      delete x[key];\n    }\n  }\n  return x as any;\n}\n\n/**\n * Checks that a value is a positive integer\n */\nexport function ensurePositiveInteger(val: number) {\n  if (!Token.isUnresolved(val) && Number.isInteger(val) && val < 0) {\n    throw new Error(`\\`${val}\\` must be a positive integer.`);\n  }\n}\n\n/**\n * Checks that a value is contained in a range of two other values\n */\nexport function ensureInRange(val: number, start: number, end: number) {\n  if (!Token.isUnresolved(val) && !(val >= start && val <= end)) {\n    throw new Error(`\\`${val}\\` must be within range ${start}:${end}`);\n  }\n}\n\nexport function stringifyOptions(options: { [key: string]: (SecretValue | Duration | string | string[] | number | boolean | undefined) }) {\n  const _options: { [key: string]: string } = {};\n  const filteredOptions = removeEmpty(options);\n\n  for (const key of Object.keys(filteredOptions)) {\n    // Convert value to string\n    _options[key] = `${filteredOptions[key]}`;\n  }\n\n  return _options;\n}\n\nexport function renderCommonLogDriverOptions(opts: BaseLogDriverProps) {\n  return {\n    'tag': opts.tag,\n    'labels': joinWithCommas(opts.labels),\n    'env': joinWithCommas(opts.env),\n    'env-regex': opts.envRegex,\n  };\n}\n\nexport function joinWithCommas(xs?: string[]): string | undefined {\n  return xs && xs.join(',');\n}\n\nexport function renderLogDriverSecretOptions(secretValue: { [key: string]: Secret }, taskDefinition: TaskDefinition):\nCfnTaskDefinition.SecretProperty[] {\n  const secrets = [];\n  for (const [name, secret] of Object.entries(secretValue)) {\n    secret.grantRead(taskDefinition.obtainExecutionRole());\n    secrets.push({\n      name,\n      valueFrom: secret.arn,\n    });\n  }\n  return secrets;\n}"],
  "mappings": "6QAAA,KAAA,QAAA,QAAA,iBASA,qBAA+B,EAA8C,CAC3E,SAAW,OAAO,QAAO,KAAK,GAC5B,AAAI,EAAE,OAAS,QACb,MAAO,GAAE,KAGb,MAAO,GANT,QAAA,YAAA,YAYA,+BAAsC,IAAW,CAC/C,GAAI,CAAC,OAAA,MAAM,aAAa,MAAQ,OAAO,UAAU,MAAQ,IAAM,EAC7D,KAAM,IAAI,OAAM,KAAK,qCAFzB,QAAA,sBAAA,sBASA,uBAA8B,IAAa,MAAe,IAAW,CACnE,GAAI,CAAC,OAAA,MAAM,aAAa,MAAQ,CAAE,MAAO,OAAS,KAAO,KACvD,KAAM,IAAI,OAAM,KAAK,8BAA8B,SAAS,OAFhE,QAAA,cAAA,cAMA,0BAAiC,QAAuG,CACtI,KAAM,UAAsC,GACtC,gBAAkB,YAAY,SAEpC,SAAW,OAAO,QAAO,KAAK,iBAE5B,SAAS,KAAO,GAAG,gBAAgB,OAGrC,MAAO,UATT,QAAA,iBAAA,iBAYA,sCAA6C,KAAwB,CACnE,MAAO,CACL,IAAO,KAAK,IACZ,OAAU,eAAe,KAAK,QAC9B,IAAO,eAAe,KAAK,KAC3B,YAAa,KAAK,UALtB,QAAA,6BAAA,6BASA,wBAA+B,GAAa,CAC1C,MAAO,KAAM,GAAG,KAAK,KADvB,QAAA,eAAA,eAIA,sCAA6C,YAAwC,eAA8B,CAEjH,KAAM,SAAU,GAChB,SAAW,CAAC,KAAM,SAAW,QAAO,QAAQ,aAC1C,OAAO,UAAU,eAAe,uBAChC,QAAQ,KAAK,CACX,KACA,UAAW,OAAO,MAGtB,MAAO,SAVT,QAAA,6BAAA",
  "names": []
}
