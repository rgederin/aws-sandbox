{
  "version": 3,
  "sources": ["create-training-job.ts"],
  "sourcesContent": ["import * as ec2 from '../../../aws-ec2';\nimport * as iam from '../../../aws-iam';\nimport * as sfn from '../../../aws-stepfunctions';\nimport { Duration, Lazy, Size, Stack } from '../../../core';\nimport { Construct } from 'constructs';\nimport { integrationResourceArn, validatePatternSupported } from '../private/task-utils';\nimport { AlgorithmSpecification, Channel, InputMode, OutputDataConfig, ResourceConfig, S3DataType, StoppingCondition, VpcConfig } from './base-types';\nimport { renderEnvironment, renderTags } from './private/utils';\n\n/**\n * Properties for creating an Amazon SageMaker training job\n *\n */\nexport interface SageMakerCreateTrainingJobProps extends sfn.TaskStateBaseProps {\n  /**\n   * Training Job Name.\n   */\n  readonly trainingJobName: string;\n\n  /**\n   * Role for the Training Job. The role must be granted all necessary permissions for the SageMaker training job to\n   * be able to operate.\n   *\n   * See https://docs.aws.amazon.com/fr_fr/sagemaker/latest/dg/sagemaker-roles.html#sagemaker-roles-createtrainingjob-perms\n   *\n   * @default - a role will be created.\n   */\n  readonly role?: iam.IRole;\n\n  /**\n   * Identifies the training algorithm to use.\n   */\n  readonly algorithmSpecification: AlgorithmSpecification;\n\n  /**\n   * Isolates the training container. No inbound or outbound network calls can be made to or from the training container.\n   *\n   * @default false\n   */\n  readonly enableNetworkIsolation?: boolean;\n\n  /**\n   * Algorithm-specific parameters that influence the quality of the model. Set hyperparameters before you start the learning process.\n   * For a list of hyperparameters provided by Amazon SageMaker\n   * @see https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html\n   *\n   * @default - No hyperparameters\n   */\n  readonly hyperparameters?: { [key: string]: any };\n\n  /**\n   *  Describes the various datasets (e.g. train, validation, test) and the Amazon S3 location where stored.\n   */\n  readonly inputDataConfig: Channel[];\n\n  /**\n   * Tags to be applied to the train job.\n   *\n   * @default - No tags\n   */\n  readonly tags?: { [key: string]: string };\n\n  /**\n   * Identifies the Amazon S3 location where you want Amazon SageMaker to save the results of model training.\n   */\n  readonly outputDataConfig: OutputDataConfig;\n\n  /**\n   * Specifies the resources, ML compute instances, and ML storage volumes to deploy for model training.\n   *\n   * @default - 1 instance of EC2 `M4.XLarge` with `10GB` volume\n   */\n  readonly resourceConfig?: ResourceConfig;\n\n  /**\n   * Sets a time limit for training.\n   *\n   * @default - max runtime of 1 hour\n   */\n  readonly stoppingCondition?: StoppingCondition;\n\n  /**\n   * Specifies the VPC that you want your training job to connect to.\n   *\n   * @default - No VPC\n   */\n  readonly vpcConfig?: VpcConfig;\n\n  /**\n   * Environment variables to set in the Docker container.\n   *\n   * @default - No environment variables\n   */\n  readonly environment?: { [key: string]: string };\n}\n\n/**\n * Class representing the SageMaker Create Training Job task.\n *\n */\nexport class SageMakerCreateTrainingJob extends sfn.TaskStateBase implements iam.IGrantable, ec2.IConnectable {\n  private static readonly SUPPORTED_INTEGRATION_PATTERNS: sfn.IntegrationPattern[] = [\n    sfn.IntegrationPattern.REQUEST_RESPONSE,\n    sfn.IntegrationPattern.RUN_JOB,\n  ];\n\n  /**\n   * Allows specify security group connections for instances of this fleet.\n   */\n  public readonly connections: ec2.Connections = new ec2.Connections();\n\n  protected readonly taskPolicies?: iam.PolicyStatement[];\n  protected readonly taskMetrics?: sfn.TaskMetricsConfig;\n\n  /**\n   * The Algorithm Specification\n   */\n  private readonly algorithmSpecification: AlgorithmSpecification;\n\n  /**\n   * The Input Data Config.\n   */\n  private readonly inputDataConfig: Channel[];\n\n  /**\n   * The resource config for the task.\n   */\n  private readonly resourceConfig: ResourceConfig;\n\n  /**\n   * The resource config for the task.\n   */\n  private readonly stoppingCondition: StoppingCondition;\n\n  private readonly vpc?: ec2.IVpc;\n  private securityGroup?: ec2.ISecurityGroup;\n  private readonly securityGroups: ec2.ISecurityGroup[] = [];\n  private readonly subnets?: string[];\n  private readonly integrationPattern: sfn.IntegrationPattern;\n  private _role?: iam.IRole;\n  private _grantPrincipal?: iam.IPrincipal;\n\n  constructor(scope: Construct, id: string, private readonly props: SageMakerCreateTrainingJobProps) {\n    super(scope, id, props);\n\n    this.integrationPattern = props.integrationPattern || sfn.IntegrationPattern.REQUEST_RESPONSE;\n    validatePatternSupported(this.integrationPattern, SageMakerCreateTrainingJob.SUPPORTED_INTEGRATION_PATTERNS);\n\n    // set the default resource config if not defined.\n    this.resourceConfig = props.resourceConfig || {\n      instanceCount: 1,\n      instanceType: ec2.InstanceType.of(ec2.InstanceClass.M4, ec2.InstanceSize.XLARGE),\n      volumeSize: Size.gibibytes(10),\n    };\n\n    // set the stopping condition if not defined\n    this.stoppingCondition = props.stoppingCondition || {\n      maxRuntime: Duration.hours(1),\n    };\n\n    // check that either algorithm name or image is defined\n    if (!props.algorithmSpecification.algorithmName && !props.algorithmSpecification.trainingImage) {\n      throw new Error('Must define either an algorithm name or training image URI in the algorithm specification');\n    }\n\n    // set the input mode to 'File' if not defined\n    this.algorithmSpecification = props.algorithmSpecification.trainingInputMode\n      ? props.algorithmSpecification\n      : { ...props.algorithmSpecification, trainingInputMode: InputMode.FILE };\n\n    // set the S3 Data type of the input data config objects to be 'S3Prefix' if not defined\n    this.inputDataConfig = props.inputDataConfig.map((config) => {\n      if (!config.dataSource.s3DataSource.s3DataType) {\n        return {\n          ...config,\n          dataSource: { s3DataSource: { ...config.dataSource.s3DataSource, s3DataType: S3DataType.S3_PREFIX } },\n        };\n      } else {\n        return config;\n      }\n    });\n\n    // add the security groups to the connections object\n    if (props.vpcConfig) {\n      this.vpc = props.vpcConfig.vpc;\n      this.subnets = props.vpcConfig.subnets ? this.vpc.selectSubnets(props.vpcConfig.subnets).subnetIds : this.vpc.selectSubnets().subnetIds;\n    }\n\n    this.taskPolicies = this.makePolicyStatements();\n  }\n\n  /**\n   * The execution role for the Sagemaker training job.\n   *\n   * Only available after task has been added to a state machine.\n   */\n  public get role(): iam.IRole {\n    if (this._role === undefined) {\n      throw new Error('role not available yet--use the object in a Task first');\n    }\n    return this._role;\n  }\n\n  public get grantPrincipal(): iam.IPrincipal {\n    if (this._grantPrincipal === undefined) {\n      throw new Error('Principal not available yet--use the object in a Task first');\n    }\n    return this._grantPrincipal;\n  }\n\n  /**\n   * Add the security group to all instances via the launch configuration\n   * security groups array.\n   *\n   * @param securityGroup: The security group to add\n   */\n  public addSecurityGroup(securityGroup: ec2.ISecurityGroup): void {\n    this.securityGroups.push(securityGroup);\n  }\n\n  /**\n   * @internal\n   */\n  protected _renderTask(): any {\n    return {\n      Resource: integrationResourceArn('sagemaker', 'createTrainingJob', this.integrationPattern),\n      Parameters: sfn.FieldUtils.renderObject(this.renderParameters()),\n    };\n  }\n\n  private renderParameters(): { [key: string]: any } {\n    return {\n      TrainingJobName: this.props.trainingJobName,\n      EnableNetworkIsolation: this.props.enableNetworkIsolation,\n      RoleArn: this._role!.roleArn,\n      ...this.renderAlgorithmSpecification(this.algorithmSpecification),\n      ...this.renderInputDataConfig(this.inputDataConfig),\n      ...this.renderOutputDataConfig(this.props.outputDataConfig),\n      ...this.renderResourceConfig(this.resourceConfig),\n      ...this.renderStoppingCondition(this.stoppingCondition),\n      ...this.renderHyperparameters(this.props.hyperparameters),\n      ...renderTags(this.props.tags),\n      ...this.renderVpcConfig(this.props.vpcConfig),\n      ...renderEnvironment(this.props.environment),\n    };\n  }\n\n  private renderAlgorithmSpecification(spec: AlgorithmSpecification): { [key: string]: any } {\n    return {\n      AlgorithmSpecification: {\n        TrainingInputMode: spec.trainingInputMode,\n        ...(spec.trainingImage ? { TrainingImage: spec.trainingImage.bind(this).imageUri } : {}),\n        ...(spec.algorithmName ? { AlgorithmName: spec.algorithmName } : {}),\n        ...(spec.metricDefinitions\n          ? { MetricDefinitions: spec.metricDefinitions.map((metric) => ({ Name: metric.name, Regex: metric.regex })) }\n          : {}),\n      },\n    };\n  }\n\n  private renderInputDataConfig(config: Channel[]): { [key: string]: any } {\n    return {\n      InputDataConfig: config.map((channel) => ({\n        ChannelName: channel.channelName,\n        DataSource: {\n          S3DataSource: {\n            S3Uri: channel.dataSource.s3DataSource.s3Location.bind(this, { forReading: true }).uri,\n            S3DataType: channel.dataSource.s3DataSource.s3DataType,\n            ...(channel.dataSource.s3DataSource.s3DataDistributionType\n              ? { S3DataDistributionType: channel.dataSource.s3DataSource.s3DataDistributionType }\n              : {}),\n            ...(channel.dataSource.s3DataSource.attributeNames ? { AttributeNames: channel.dataSource.s3DataSource.attributeNames } : {}),\n          },\n        },\n        ...(channel.compressionType ? { CompressionType: channel.compressionType } : {}),\n        ...(channel.contentType ? { ContentType: channel.contentType } : {}),\n        ...(channel.inputMode ? { InputMode: channel.inputMode } : {}),\n        ...(channel.recordWrapperType ? { RecordWrapperType: channel.recordWrapperType } : {}),\n      })),\n    };\n  }\n\n  private renderOutputDataConfig(config: OutputDataConfig): { [key: string]: any } {\n    return {\n      OutputDataConfig: {\n        S3OutputPath: config.s3OutputLocation.bind(this, { forWriting: true }).uri,\n        ...(config.encryptionKey ? { KmsKeyId: config.encryptionKey.keyArn } : {}),\n      },\n    };\n  }\n\n  private renderResourceConfig(config: ResourceConfig): { [key: string]: any } {\n    return {\n      ResourceConfig: {\n        InstanceCount: config.instanceCount,\n        InstanceType: sfn.JsonPath.isEncodedJsonPath(config.instanceType.toString())\n          ? config.instanceType.toString() : `ml.${config.instanceType}`,\n        VolumeSizeInGB: config.volumeSize.toGibibytes(),\n        ...(config.volumeEncryptionKey ? { VolumeKmsKeyId: config.volumeEncryptionKey.keyArn } : {}),\n      },\n    };\n  }\n\n  private renderStoppingCondition(config: StoppingCondition): { [key: string]: any } {\n    return {\n      StoppingCondition: {\n        MaxRuntimeInSeconds: config.maxRuntime && config.maxRuntime.toSeconds(),\n      },\n    };\n  }\n\n  private renderHyperparameters(params: { [key: string]: any } | undefined): { [key: string]: any } {\n    return params ? { HyperParameters: params } : {};\n  }\n\n  private renderVpcConfig(config: VpcConfig | undefined): { [key: string]: any } {\n    return config\n      ? {\n        VpcConfig: {\n          SecurityGroupIds: Lazy.list({ produce: () => this.securityGroups.map((sg) => sg.securityGroupId) }),\n          Subnets: this.subnets,\n        },\n      }\n      : {};\n  }\n\n  private makePolicyStatements(): iam.PolicyStatement[] {\n    // set the sagemaker role or create new one\n    this._grantPrincipal = this._role =\n      this.props.role ||\n      new iam.Role(this, 'SagemakerRole', {\n        assumedBy: new iam.ServicePrincipal('sagemaker.amazonaws.com'),\n        inlinePolicies: {\n          CreateTrainingJob: new iam.PolicyDocument({\n            statements: [\n              new iam.PolicyStatement({\n                actions: [\n                  'cloudwatch:PutMetricData',\n                  'logs:CreateLogStream',\n                  'logs:PutLogEvents',\n                  'logs:CreateLogGroup',\n                  'logs:DescribeLogStreams',\n                  'ecr:GetAuthorizationToken',\n                  ...(this.props.vpcConfig\n                    ? [\n                      'ec2:CreateNetworkInterface',\n                      'ec2:CreateNetworkInterfacePermission',\n                      'ec2:DeleteNetworkInterface',\n                      'ec2:DeleteNetworkInterfacePermission',\n                      'ec2:DescribeNetworkInterfaces',\n                      'ec2:DescribeVpcs',\n                      'ec2:DescribeDhcpOptions',\n                      'ec2:DescribeSubnets',\n                      'ec2:DescribeSecurityGroups',\n                    ]\n                    : []),\n                ],\n                resources: ['*'], // Those permissions cannot be resource-scoped\n              }),\n            ],\n          }),\n        },\n      });\n\n    if (this.props.outputDataConfig.encryptionKey) {\n      this.props.outputDataConfig.encryptionKey.grantEncrypt(this._role);\n    }\n\n    if (this.props.resourceConfig && this.props.resourceConfig.volumeEncryptionKey) {\n      this.props.resourceConfig.volumeEncryptionKey.grant(this._role, 'kms:CreateGrant');\n    }\n\n    // create a security group if not defined\n    if (this.vpc && this.securityGroup === undefined) {\n      this.securityGroup = new ec2.SecurityGroup(this, 'TrainJobSecurityGroup', {\n        vpc: this.vpc,\n      });\n      this.connections.addSecurityGroup(this.securityGroup);\n      this.securityGroups.push(this.securityGroup);\n    }\n\n    const stack = Stack.of(this);\n\n    // https://docs.aws.amazon.com/step-functions/latest/dg/sagemaker-iam.html\n    const policyStatements = [\n      new iam.PolicyStatement({\n        actions: ['sagemaker:CreateTrainingJob', 'sagemaker:DescribeTrainingJob', 'sagemaker:StopTrainingJob'],\n        resources: [\n          stack.formatArn({\n            service: 'sagemaker',\n            resource: 'training-job',\n            // If the job name comes from input, we cannot target the policy to a particular ARN prefix reliably...\n            resourceName: sfn.JsonPath.isEncodedJsonPath(this.props.trainingJobName) ? '*' : `${this.props.trainingJobName}*`,\n          }),\n        ],\n      }),\n      new iam.PolicyStatement({\n        actions: ['sagemaker:ListTags'],\n        resources: ['*'],\n      }),\n      new iam.PolicyStatement({\n        actions: ['iam:PassRole'],\n        resources: [this._role!.roleArn],\n        conditions: {\n          StringEquals: { 'iam:PassedToService': 'sagemaker.amazonaws.com' },\n        },\n      }),\n    ];\n\n    if (this.integrationPattern === sfn.IntegrationPattern.RUN_JOB) {\n      policyStatements.push(\n        new iam.PolicyStatement({\n          actions: ['events:PutTargets', 'events:PutRule', 'events:DescribeRule'],\n          resources: [\n            stack.formatArn({\n              service: 'events',\n              resource: 'rule',\n              resourceName: 'StepFunctionsGetEventsForSageMakerTrainingJobsRule',\n            }),\n          ],\n        }),\n      );\n    }\n\n    return policyStatements;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
