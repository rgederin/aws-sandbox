{
  "version": 3,
  "sources": ["run-task.ts"],
  "sourcesContent": ["import * as ec2 from '../../../aws-ec2';\nimport * as ecs from '../../../aws-ecs';\nimport * as iam from '../../../aws-iam';\nimport * as sfn from '../../../aws-stepfunctions';\nimport * as cdk from '../../../core';\nimport { Construct } from 'constructs';\nimport { ContainerOverride } from '..';\nimport { integrationResourceArn, validatePatternSupported } from '../private/task-utils';\n\n/**\n * Properties for ECS Tasks\n */\nexport interface EcsRunTaskProps extends sfn.TaskStateBaseProps {\n  /**\n   * The ECS cluster to run the task on\n   */\n  readonly cluster: ecs.ICluster;\n\n  /**\n   * [disable-awslint:ref-via-interface]\n   * Task Definition used for running tasks in the service.\n   *\n   * Note: this must be TaskDefinition, and not ITaskDefinition,\n   * as it requires properties that are not known for imported task definitions\n   */\n  readonly taskDefinition: ecs.TaskDefinition;\n\n  /**\n   * Container setting overrides\n   *\n   * Specify the container to use and the overrides to apply.\n   *\n   * @default - No overrides\n   */\n  readonly containerOverrides?: ContainerOverride[];\n\n  /**\n   * Subnets to place the task's ENIs\n   *\n   * @default - Public subnets if assignPublicIp is set. Private subnets otherwise.\n   */\n  readonly subnets?: ec2.SubnetSelection;\n\n  /**\n   * Existing security groups to use for the tasks\n   *\n   * @default - A new security group is created\n   */\n  readonly securityGroups?: ec2.ISecurityGroup[];\n\n  /**\n   * Assign public IP addresses to each task\n   *\n   * @default false\n   */\n  readonly assignPublicIp?: boolean;\n\n  /**\n   * An Amazon ECS launch type determines the type of infrastructure on which your\n   * tasks and services are hosted.\n   *\n   * @see https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html\n   */\n  readonly launchTarget: IEcsLaunchTarget;\n}\n\n/**\n * An Amazon ECS launch type determines the type of infrastructure on which your tasks and services are hosted.\n * @see https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html\n */\nexport interface IEcsLaunchTarget {\n  /**\n   * called when the ECS launch target is configured on RunTask\n   */\n  bind(task: EcsRunTask, launchTargetOptions: LaunchTargetBindOptions): EcsLaunchTargetConfig;\n}\n\n/**\n * Options for binding a launch target to an ECS run job task\n */\nexport interface LaunchTargetBindOptions {\n  /**\n   * Task definition to run Docker containers in Amazon ECS\n   */\n  readonly taskDefinition: ecs.ITaskDefinition;\n\n  /**\n   * A regional grouping of one or more container instances on which you can run\n   * tasks and services.\n   *\n   * @default - No cluster\n   */\n  readonly cluster?: ecs.ICluster;\n}\n\n/**\n * Configuration options for the ECS launch type\n */\nexport interface EcsLaunchTargetConfig {\n  /**\n   * Additional parameters to pass to the base task\n   *\n   * @default - No additional parameters passed\n   */\n  readonly parameters?: { [key: string]: any };\n}\n\n/**\n * Properties to define an ECS service\n */\nexport interface EcsFargateLaunchTargetOptions {\n  /**\n   * Refers to a specific runtime environment for Fargate task infrastructure.\n   * Fargate platform version is a combination of the kernel and container runtime versions.\n   *\n   * @see https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html\n   */\n  readonly platformVersion: ecs.FargatePlatformVersion;\n}\n\n/**\n * Options to run an ECS task on EC2 in StepFunctions and ECS\n */\nexport interface EcsEc2LaunchTargetOptions {\n  /**\n   * Placement constraints\n   *\n   * @default  - None\n   */\n  readonly placementConstraints?: ecs.PlacementConstraint[];\n\n  /**\n   * Placement strategies\n   *\n   * @default - None\n   */\n  readonly placementStrategies?: ecs.PlacementStrategy[];\n}\n\n/**\n * Configuration for running an ECS task on Fargate\n *\n * @see https://docs.aws.amazon.com/AmazonECS/latest/userguide/launch_types.html#launch-type-fargate\n */\nexport class EcsFargateLaunchTarget implements IEcsLaunchTarget {\n  constructor(private readonly options?: EcsFargateLaunchTargetOptions) {}\n\n  /**\n   * Called when the Fargate launch type configured on RunTask\n   */\n  public bind(_task: EcsRunTask, launchTargetOptions: LaunchTargetBindOptions): EcsLaunchTargetConfig {\n    if (!launchTargetOptions.taskDefinition.isFargateCompatible) {\n      throw new Error('Supplied TaskDefinition is not compatible with Fargate');\n    }\n\n    return {\n      parameters: {\n        LaunchType: 'FARGATE',\n        PlatformVersion: this.options?.platformVersion,\n      },\n    };\n  }\n}\n\n/**\n * Configuration for running an ECS task on EC2\n *\n * @see https://docs.aws.amazon.com/AmazonECS/latest/userguide/launch_types.html#launch-type-ec2\n */\nexport class EcsEc2LaunchTarget implements IEcsLaunchTarget {\n  constructor(private readonly options?: EcsEc2LaunchTargetOptions) {}\n  /**\n   * Called when the EC2 launch type is configured on RunTask\n   */\n  public bind(_task: EcsRunTask, launchTargetOptions: LaunchTargetBindOptions): EcsLaunchTargetConfig {\n    if (!launchTargetOptions.taskDefinition.isEc2Compatible) {\n      throw new Error('Supplied TaskDefinition is not compatible with EC2');\n    }\n\n    if (!launchTargetOptions.cluster?.hasEc2Capacity) {\n      throw new Error('Cluster for this service needs Ec2 capacity. Call addCapacity() on the cluster.');\n    }\n\n    return {\n      parameters: {\n        LaunchType: 'EC2',\n        // takes an array of placement constraints each of which contain a single item array of constraints, flattens it\n        // and renders the Json to be passed as a parameter in the state machine.\n        // input: [ecs.PlacementConstraint.distinctInstances()] - distinctInstances() returns [{ type: 'distinctInstance' }]\n        // output: {Type: 'distinctInstance'}\n        PlacementConstraints: noEmpty(flatten((this.options?.placementConstraints ?? []).map((c) => c.toJson().map(uppercaseKeys)))),\n        PlacementStrategy: noEmpty(flatten((this.options?.placementStrategies ?? []).map((c) => c.toJson().map(uppercaseKeys)))),\n      },\n    };\n\n    function uppercaseKeys(obj: { [key: string]: any }): { [key: string]: any } {\n      const ret: { [key: string]: any } = {};\n      for (const key of Object.keys(obj)) {\n        ret[key.slice(0, 1).toUpperCase() + key.slice(1)] = obj[key];\n      }\n      return ret;\n    }\n\n    function flatten<A>(xs: A[][]): A[] {\n      return Array.prototype.concat([], ...xs);\n    }\n\n    function noEmpty<A>(xs: A[]): A[] | undefined {\n      if (xs.length === 0) {\n        return undefined;\n      }\n      return xs;\n    }\n  }\n}\n\n/**\n * Run a Task on ECS or Fargate\n */\nexport class EcsRunTask extends sfn.TaskStateBase implements ec2.IConnectable {\n  private static readonly SUPPORTED_INTEGRATION_PATTERNS: sfn.IntegrationPattern[] = [\n    sfn.IntegrationPattern.REQUEST_RESPONSE,\n    sfn.IntegrationPattern.RUN_JOB,\n    sfn.IntegrationPattern.WAIT_FOR_TASK_TOKEN,\n  ];\n\n  /**\n   * Manage allowed network traffic for this service\n   */\n  public readonly connections: ec2.Connections = new ec2.Connections();\n\n  protected readonly taskMetrics?: sfn.TaskMetricsConfig;\n  protected readonly taskPolicies?: iam.PolicyStatement[];\n\n  private securityGroups: ec2.ISecurityGroup[] = [];\n  private networkConfiguration?: any;\n  private readonly integrationPattern: sfn.IntegrationPattern;\n\n  constructor(scope: Construct, id: string, private readonly props: EcsRunTaskProps) {\n    super(scope, id, props);\n    this.integrationPattern = props.integrationPattern ?? sfn.IntegrationPattern.REQUEST_RESPONSE;\n\n    validatePatternSupported(this.integrationPattern, EcsRunTask.SUPPORTED_INTEGRATION_PATTERNS);\n\n    if (this.integrationPattern === sfn.IntegrationPattern.WAIT_FOR_TASK_TOKEN\n      && !sfn.FieldUtils.containsTaskToken(props.containerOverrides?.map(override => override.environment))) {\n      throw new Error('Task Token is required in at least one `containerOverrides.environment` for callback. Use JsonPath.taskToken to set the token.');\n    }\n\n    if (!this.props.taskDefinition.defaultContainer) {\n      throw new Error('A TaskDefinition must have at least one essential container');\n    }\n\n    if (this.props.taskDefinition.networkMode === ecs.NetworkMode.AWS_VPC) {\n      this.configureAwsVpcNetworking();\n    } else {\n      // Either None, Bridge or Host networking. Copy SecurityGroup from ASG.\n      this.validateNoNetworkingProps();\n      this.connections.addSecurityGroup(...this.props.cluster.connections.securityGroups);\n    }\n\n    for (const override of this.props.containerOverrides ?? []) {\n      const name = override.containerDefinition.containerName;\n      if (!cdk.Token.isUnresolved(name)) {\n        const cont = this.props.taskDefinition.findContainer(name);\n        if (!cont) {\n          throw new Error(`Overrides mention container with name '${name}', but no such container in task definition`);\n        }\n      }\n    }\n\n    this.taskPolicies = this.makePolicyStatements();\n  }\n\n  /**\n   * @internal\n   */\n  protected _renderTask(): any {\n    return {\n      Resource: integrationResourceArn('ecs', 'runTask', this.integrationPattern),\n      Parameters: sfn.FieldUtils.renderObject({\n        Cluster: this.props.cluster.clusterArn,\n        TaskDefinition: this.props.taskDefinition.family,\n        NetworkConfiguration: this.networkConfiguration,\n        Overrides: renderOverrides(this.props.containerOverrides),\n        ...this.props.launchTarget.bind(this, { taskDefinition: this.props.taskDefinition, cluster: this.props.cluster }).parameters,\n      }),\n    };\n  }\n\n  private configureAwsVpcNetworking() {\n    const subnetSelection = this.props.subnets ?? { subnetType: this.props.assignPublicIp ? ec2.SubnetType.PUBLIC : ec2.SubnetType.PRIVATE };\n\n    this.networkConfiguration = {\n      AwsvpcConfiguration: {\n        AssignPublicIp: this.props.assignPublicIp ? (this.props.assignPublicIp ? 'ENABLED' : 'DISABLED') : undefined,\n        Subnets: this.props.cluster.vpc.selectSubnets(subnetSelection).subnetIds,\n        SecurityGroups: cdk.Lazy.list({ produce: () => this.securityGroups?.map(sg => sg.securityGroupId) }),\n      },\n    };\n\n    // Make sure we have a security group if we're using AWSVPC networking\n    this.securityGroups = this.props.securityGroups ?? [new ec2.SecurityGroup(this, 'SecurityGroup', { vpc: this.props.cluster.vpc })];\n    this.connections.addSecurityGroup(...this.securityGroups);\n  }\n\n  private validateNoNetworkingProps() {\n    if (this.props.subnets !== undefined || this.props.securityGroups !== undefined) {\n      throw new Error(\n        `Supplied TaskDefinition must have 'networkMode' of 'AWS_VPC' to use 'vpcSubnets' and 'securityGroup'. Received: ${this.props.taskDefinition.networkMode}`,\n      );\n    }\n  }\n\n  private makePolicyStatements(): iam.PolicyStatement[] {\n    const stack = cdk.Stack.of(this);\n\n    // https://docs.aws.amazon.com/step-functions/latest/dg/ecs-iam.html\n    const policyStatements = [\n      new iam.PolicyStatement({\n        actions: ['ecs:RunTask'],\n        resources: [this.getTaskDefinitionFamilyArn()],\n      }),\n      new iam.PolicyStatement({\n        actions: ['ecs:StopTask', 'ecs:DescribeTasks'],\n        resources: ['*'],\n      }),\n      new iam.PolicyStatement({\n        actions: ['iam:PassRole'],\n        resources: this.taskExecutionRoles().map((r) => r.roleArn),\n      }),\n    ];\n\n    if (this.integrationPattern === sfn.IntegrationPattern.RUN_JOB) {\n      policyStatements.push(\n        new iam.PolicyStatement({\n          actions: ['events:PutTargets', 'events:PutRule', 'events:DescribeRule'],\n          resources: [\n            stack.formatArn({\n              service: 'events',\n              resource: 'rule',\n              resourceName: 'StepFunctionsGetEventsForECSTaskRule',\n            }),\n          ],\n        }),\n      );\n    }\n\n    return policyStatements;\n  }\n\n  /**\n   * Returns the ARN of the task definition family by removing the\n   * revision from the task definition ARN\n   * Before - arn:aws:ecs:us-west-2:123456789012:task-definition/hello_world:8\n   * After - arn:aws:ecs:us-west-2:123456789012:task-definition/hello_world\n   */\n  private getTaskDefinitionFamilyArn(): string {\n    const arnComponents = cdk.Stack.of(this).splitArn(this.props.taskDefinition.taskDefinitionArn, cdk.ArnFormat.SLASH_RESOURCE_NAME);\n    let { resourceName } = arnComponents;\n\n    if (resourceName) {\n      resourceName = resourceName.split(':')[0];\n    }\n\n    return cdk.Stack.of(this).formatArn({\n      partition: arnComponents.partition,\n      service: arnComponents.service,\n      account: arnComponents.account,\n      region: arnComponents.region,\n      resource: arnComponents.resource,\n      arnFormat: arnComponents.arnFormat,\n      resourceName,\n    });\n  }\n\n  private taskExecutionRoles(): iam.IRole[] {\n    // Need to be able to pass both Task and Execution role, apparently\n    const ret = new Array<iam.IRole>();\n    ret.push(this.props.taskDefinition.taskRole);\n    if (this.props.taskDefinition.executionRole) {\n      ret.push(this.props.taskDefinition.executionRole);\n    }\n    return ret;\n  }\n}\n\nfunction renderOverrides(containerOverrides?: ContainerOverride[]) {\n  if (!containerOverrides || containerOverrides.length === 0) {\n    return undefined;\n  }\n\n  const ret = new Array<any>();\n  for (const override of containerOverrides) {\n    ret.push({\n      Name: override.containerDefinition.containerName,\n      Command: override.command,\n      Cpu: override.cpu,\n      Memory: override.memoryLimit,\n      MemoryReservation: override.memoryReservation,\n      Environment:\n        override.environment?.map((e) => ({\n          Name: e.name,\n          Value: e.value,\n        })),\n    });\n  }\n\n  return { ContainerOverrides: ret };\n}\n"],
  "mappings": "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",
  "names": []
}
