{
  "version": 3,
  "sources": ["endpoint-group.ts"],
  "sourcesContent": ["import * as ec2 from '../../aws-ec2';\nimport * as cdk from '../../core';\nimport { Construct } from 'constructs';\nimport { AcceleratorSecurityGroupPeer } from './_accelerator-security-group';\nimport { IEndpoint } from './endpoint';\nimport * as ga from './globalaccelerator.generated';\nimport { IListener } from './listener';\n\n/**\n * The interface of the EndpointGroup\n */\nexport interface IEndpointGroup extends cdk.IResource {\n  /**\n   * EndpointGroup ARN\n   * @attribute\n   */\n  readonly endpointGroupArn: string;\n}\n\n/**\n * Basic options for creating a new EndpointGroup\n */\nexport interface EndpointGroupOptions {\n  /**\n   * Name of the endpoint group\n   *\n   * @default - logical ID of the resource\n   */\n  readonly endpointGroupName?: string;\n\n  /**\n   * The AWS Region where the endpoint group is located.\n   *\n   * @default - region of the first endpoint in this group, or the stack region if that region can't be determined\n   */\n  readonly region?: string;\n\n  /**\n   * The time between health checks for each endpoint\n   *\n   * Must be either 10 or 30 seconds.\n   *\n   * @default Duration.seconds(30)\n   */\n  readonly healthCheckInterval?: cdk.Duration;\n\n  /**\n   * The ping path for health checks (if the protocol is HTTP(S)).\n   *\n   * @default '/'\n   */\n  readonly healthCheckPath?: string;\n\n  /**\n   * The port used to perform health checks\n   *\n   * @default - The listener's port\n   */\n  readonly healthCheckPort?: number;\n\n  /**\n   * The protocol used to perform health checks\n   *\n   * @default HealthCheckProtocol.TCP\n   */\n  readonly healthCheckProtocol?: HealthCheckProtocol;\n\n  /**\n   * The number of consecutive health checks required to set the state of a\n   * healthy endpoint to unhealthy, or to set an unhealthy endpoint to healthy.\n   *\n   * @default 3\n   */\n  readonly healthCheckThreshold?: number;\n\n  /**\n   * The percentage of traffic to send to this AWS Region.\n   *\n   * The percentage is applied to the traffic that would otherwise have been\n   * routed to the Region based on optimal routing. Additional traffic is\n   * distributed to other endpoint groups for this listener.\n   *\n   * @default 100\n   */\n  readonly trafficDialPercentage?: number;\n\n  /**\n   * Override the destination ports used to route traffic to an endpoint.\n   *\n   * Unless overridden, the port used to hit the endpoint will be the same as the port\n   * that traffic arrives on at the listener.\n   *\n   * @default - No overrides\n   */\n  readonly portOverrides?: PortOverride[]\n\n  /**\n   * Initial list of endpoints for this group\n   *\n   * @default - Group is initially empty\n   */\n  readonly endpoints?: IEndpoint[];\n}\n\n/**\n * Override specific listener ports used to route traffic to endpoints that are part of an endpoint group.\n */\nexport interface PortOverride {\n  /**\n   * The listener port that you want to map to a specific endpoint port.\n   *\n   * This is the port that user traffic arrives to the Global Accelerator on.\n   */\n  readonly listenerPort: number;\n\n  /**\n   * The endpoint port that you want a listener port to be mapped to.\n   *\n   * This is the port on the endpoint, such as the Application Load Balancer or Amazon EC2 instance.\n   */\n  readonly endpointPort: number;\n}\n\n/**\n * The protocol for the connections from clients to the accelerator.\n */\nexport enum HealthCheckProtocol {\n  /**\n   * TCP\n   */\n  TCP = 'TCP',\n  /**\n   * HTTP\n   */\n  HTTP = 'HTTP',\n  /**\n   * HTTPS\n   */\n  HTTPS = 'HTTPS',\n}\n\n/**\n * Property of the EndpointGroup\n */\nexport interface EndpointGroupProps extends EndpointGroupOptions {\n  /**\n   * The Amazon Resource Name (ARN) of the listener.\n   */\n  readonly listener: IListener;\n}\n\n/**\n * EndpointGroup construct\n */\nexport class EndpointGroup extends cdk.Resource implements IEndpointGroup {\n  /**\n   * import from ARN\n   */\n  public static fromEndpointGroupArn(scope: Construct, id: string, endpointGroupArn: string): IEndpointGroup {\n    class Import extends cdk.Resource implements IEndpointGroup {\n      public readonly endpointGroupArn = endpointGroupArn;\n    }\n    return new Import(scope, id);\n  }\n\n  public readonly endpointGroupArn: string;\n  /**\n   *\n   * The name of the endpoint group\n   *\n   * @attribute\n   */\n  public readonly endpointGroupName: string;\n  /**\n   * The array of the endpoints in this endpoint group\n   */\n  protected readonly endpoints = new Array<IEndpoint>();\n\n  constructor(scope: Construct, id: string, props: EndpointGroupProps) {\n    super(scope, id);\n\n    const resource = new ga.CfnEndpointGroup(this, 'Resource', {\n      listenerArn: props.listener.listenerArn,\n      endpointGroupRegion: props.region ?? cdk.Lazy.string({ produce: () => this.firstEndpointRegion() }),\n      endpointConfigurations: cdk.Lazy.any({ produce: () => this.renderEndpoints() }, { omitEmptyArray: true }),\n      healthCheckIntervalSeconds: props.healthCheckInterval?.toSeconds({ integral: true }),\n      healthCheckPath: props.healthCheckPath,\n      healthCheckPort: props.healthCheckPort,\n      healthCheckProtocol: props.healthCheckProtocol,\n      thresholdCount: props.healthCheckThreshold,\n      trafficDialPercentage: props.trafficDialPercentage,\n      portOverrides: props.portOverrides?.map(o => ({\n        endpointPort: o.endpointPort,\n        listenerPort: o.listenerPort,\n      })),\n    });\n\n    this.endpointGroupArn = resource.attrEndpointGroupArn;\n    this.endpointGroupName = props.endpointGroupName ?? resource.logicalId;\n\n    for (const endpoint of props.endpoints ?? []) {\n      this.addEndpoint(endpoint);\n    }\n  }\n\n  /**\n   * Add an endpoint\n   */\n  public addEndpoint(endpoint: IEndpoint) {\n    this.endpoints.push(endpoint);\n  }\n\n  /**\n   * Return an object that represents the Accelerator's Security Group\n   *\n   * Uses a Custom Resource to look up the Security Group that Accelerator\n   * creates at deploy time. Requires your VPC ID to perform the lookup.\n   *\n   * The Security Group will only be created if you enable **Client IP\n   * Preservation** on any of the endpoints.\n   *\n   * You cannot manipulate the rules inside this security group, but you can\n   * use this security group as a Peer in Connections rules on other\n   * constructs.\n   */\n  public connectionsPeer(id: string, vpc: ec2.IVpc): ec2.IPeer {\n    return AcceleratorSecurityGroupPeer.fromVpc(this, id, vpc, this);\n  }\n\n  private renderEndpoints() {\n    return this.endpoints.map(e => e.renderEndpointConfiguration());\n  }\n\n  /**\n   * Return the first (readable) region of the endpoints in this group\n   */\n  private firstEndpointRegion() {\n    for (const endpoint of this.endpoints) {\n      if (endpoint.region) {\n        return endpoint.region;\n      }\n    }\n    return cdk.Stack.of(this).region;\n  }\n}\n"],
  "mappings": "gPACA,IAAA,QAAA,cAEA,8BAAA,QAAA,iCAEA,GAAA,QAAA,iCAyHA,GAAY,qBAAZ,AAAA,UAAY,qBAAmB,CAI7B,qBAAA,IAAA,MAIA,qBAAA,KAAA,OAIA,qBAAA,MAAA,UAZU,oBAAA,QAAA,qBAAA,SAAA,oBAAmB,KA4B/B,2BAAmC,KAAI,QAAQ,CAwB7C,YAAY,MAAkB,GAAY,MAAyB,oBACjE,MAAM,MAAO,IAHI,KAAA,UAAY,GAAI,2FAKjC,KAAM,UAAW,GAAI,IAAG,iBAAiB,KAAM,WAAY,CACzD,YAAa,MAAM,SAAS,YAC5B,oBAAmB,IAAE,MAAM,UAAM,MAAA,KAAA,OAAA,GAAI,IAAI,KAAK,OAAO,CAAE,QAAS,IAAM,KAAK,wBAC3E,uBAAwB,IAAI,KAAK,IAAI,CAAE,QAAS,IAAM,KAAK,mBAAqB,CAAE,eAAgB,KAClG,2BAA0B,IAAE,MAAM,uBAAmB,MAAA,KAAA,OAAA,OAAA,GAAE,UAAU,CAAE,SAAU,KAC7E,gBAAiB,MAAM,gBACvB,gBAAiB,MAAM,gBACvB,oBAAqB,MAAM,oBAC3B,eAAgB,MAAM,qBACtB,sBAAuB,MAAM,sBAC7B,cAAa,IAAE,MAAM,iBAAa,MAAA,KAAA,OAAA,OAAA,GAAE,IAAI,GAAM,EAC5C,aAAc,EAAE,aAChB,aAAc,EAAE,kBAIpB,KAAK,iBAAmB,SAAS,qBACjC,KAAK,kBAAiB,IAAG,MAAM,qBAAiB,MAAA,KAAA,OAAA,GAAI,SAAS,UAE7D,SAAW,YAAQ,IAAI,MAAM,aAAS,MAAA,KAAA,OAAA,GAAI,GACxC,KAAK,YAAY,gBA3CP,sBAAqB,MAAkB,GAAY,iBAAwB,CACvF,oBAAqB,KAAI,QAAQ,CAAjC,aAAA,qBACkB,KAAA,iBAAmB,kBAErC,MAAO,IAAI,QAAO,MAAO,IA8CpB,YAAY,SAAmB,+EACpC,KAAK,UAAU,KAAK,UAgBf,gBAAgB,GAAY,IAAa,8DACvC,8BAAA,6BAA6B,QAAQ,KAAM,GAAI,IAAK,MAGrD,iBAAe,CACrB,MAAO,MAAK,UAAU,IAAI,GAAK,EAAE,+BAM3B,qBAAmB,CACzB,SAAW,YAAY,MAAK,UAC1B,GAAI,SAAS,OACX,MAAO,UAAS,OAGpB,MAAO,KAAI,MAAM,GAAG,MAAM,QAxF9B,QAAA,cAAA",
  "names": []
}
