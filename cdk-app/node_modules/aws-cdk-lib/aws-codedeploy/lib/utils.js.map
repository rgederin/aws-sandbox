{
  "version": 3,
  "sources": ["utils.ts"],
  "sourcesContent": ["import * as cloudwatch from '../../aws-cloudwatch';\nimport { Aws } from '../../core';\nimport { CfnDeploymentGroup } from './codedeploy.generated';\nimport { AutoRollbackConfig } from './rollback-config';\n\nexport function arnForApplication(applicationName: string): string {\n  return `arn:${Aws.PARTITION}:codedeploy:${Aws.REGION}:${Aws.ACCOUNT_ID}:application:${applicationName}`;\n}\n\nexport function arnForDeploymentGroup(applicationName: string, deploymentGroupName: string): string {\n  return `arn:${Aws.PARTITION}:codedeploy:${Aws.REGION}:${Aws.ACCOUNT_ID}:deploymentgroup:${applicationName}/${deploymentGroupName}`;\n}\n\nexport function arnForDeploymentConfig(name: string): string {\n  return `arn:${Aws.PARTITION}:codedeploy:${Aws.REGION}:${Aws.ACCOUNT_ID}:deploymentconfig:${name}`;\n}\n\nexport function renderAlarmConfiguration(alarms: cloudwatch.IAlarm[], ignorePollAlarmFailure?: boolean):\nCfnDeploymentGroup.AlarmConfigurationProperty | undefined {\n  return alarms.length === 0\n    ? undefined\n    : {\n      alarms: alarms.map(a => ({ name: a.alarmName })),\n      enabled: true,\n      ignorePollAlarmFailure,\n    };\n}\n\nenum AutoRollbackEvent {\n  DEPLOYMENT_FAILURE = 'DEPLOYMENT_FAILURE',\n  DEPLOYMENT_STOP_ON_ALARM = 'DEPLOYMENT_STOP_ON_ALARM',\n  DEPLOYMENT_STOP_ON_REQUEST = 'DEPLOYMENT_STOP_ON_REQUEST'\n}\n\nexport function renderAutoRollbackConfiguration(alarms: cloudwatch.IAlarm[], autoRollbackConfig: AutoRollbackConfig = {}):\nCfnDeploymentGroup.AutoRollbackConfigurationProperty | undefined {\n  const events = new Array<string>();\n\n  // we roll back failed deployments by default\n  if (autoRollbackConfig.failedDeployment !== false) {\n    events.push(AutoRollbackEvent.DEPLOYMENT_FAILURE);\n  }\n\n  // we _do not_ roll back stopped deployments by default\n  if (autoRollbackConfig.stoppedDeployment === true) {\n    events.push(AutoRollbackEvent.DEPLOYMENT_STOP_ON_REQUEST);\n  }\n\n  // we _do not_ roll back alarm-triggering deployments by default\n  // unless the Deployment Group has at least one alarm\n  if (autoRollbackConfig.deploymentInAlarm !== false) {\n    if (alarms.length > 0) {\n      events.push(AutoRollbackEvent.DEPLOYMENT_STOP_ON_ALARM);\n    } else if (autoRollbackConfig.deploymentInAlarm === true) {\n      throw new Error(\n        \"The auto-rollback setting 'deploymentInAlarm' does not have any effect unless you associate \" +\n        'at least one CloudWatch alarm with the Deployment Group');\n    }\n  }\n\n  return events.length > 0\n    ? {\n      enabled: true,\n      events,\n    }\n    : undefined;\n}\n"],
  "mappings": "2OACA,KAAA,QAAA,QAAA,cAIA,2BAAkC,gBAAuB,CACvD,MAAO,OAAO,OAAA,IAAI,wBAAwB,OAAA,IAAI,UAAU,OAAA,IAAI,0BAA0B,kBADxF,QAAA,kBAAA,kBAIA,+BAAsC,gBAAyB,oBAA2B,CACxF,MAAO,OAAO,OAAA,IAAI,wBAAwB,OAAA,IAAI,UAAU,OAAA,IAAI,8BAA8B,mBAAmB,sBAD/G,QAAA,sBAAA,sBAIA,gCAAuC,KAAY,CACjD,MAAO,OAAO,OAAA,IAAI,wBAAwB,OAAA,IAAI,UAAU,OAAA,IAAI,+BAA+B,OAD7F,QAAA,uBAAA,uBAIA,kCAAyC,OAA6B,uBAAgC,CAEpG,MAAO,QAAO,SAAW,EACrB,OACA,CACA,OAAQ,OAAO,IAAI,GAAM,EAAE,KAAM,EAAE,aACnC,QAAS,GACT,wBAPN,QAAA,yBAAA,yBAWA,GAAK,mBAAL,AAAA,UAAK,mBAAiB,CACpB,mBAAA,mBAAA,qBACA,mBAAA,yBAAA,2BACA,mBAAA,2BAAA,+BAHG,mBAAA,mBAAiB,KAMtB,yCAAgD,OAA6B,mBAAyC,GAAE,CAEtH,KAAM,QAAS,GAAI,OAcnB,GAXI,mBAAmB,mBAAqB,IAC1C,OAAO,KAAK,kBAAkB,oBAI5B,mBAAmB,oBAAsB,IAC3C,OAAO,KAAK,kBAAkB,4BAK5B,mBAAmB,oBAAsB,IAC3C,GAAI,OAAO,OAAS,EAClB,OAAO,KAAK,kBAAkB,kCACrB,mBAAmB,oBAAsB,GAClD,KAAM,IAAI,OACR,uJAKN,MAAO,QAAO,OAAS,EACnB,CACA,QAAS,GACT,QAEA,OA/BN,QAAA,gCAAA",
  "names": []
}
