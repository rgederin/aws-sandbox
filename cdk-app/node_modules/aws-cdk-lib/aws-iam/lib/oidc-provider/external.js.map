{
  "version": 3,
  "sources": ["external.ts"],
  "sourcesContent": ["/* istanbul ignore file */\n\nimport * as tls from 'tls';\nimport * as url from 'url';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport * as aws from 'aws-sdk';\n\nlet client: aws.IAM;\n\nfunction iam() {\n  if (!client) { client = new aws.IAM(); }\n  return client;\n}\n\nfunction defaultLogger(fmt: string, ...args: any[]) {\n  // eslint-disable-next-line no-console\n  console.log(fmt, ...args);\n}\n\n/**\n * Downloads the CA thumbprint from the issuer URL\n */\nasync function downloadThumbprint(issuerUrl: string) {\n  external.log(`downloading certificate authority thumbprint for ${issuerUrl}`);\n  return new Promise<string>((ok, ko) => {\n    const purl = url.parse(issuerUrl);\n    const port = purl.port ? parseInt(purl.port, 10) : 443;\n    if (!purl.host) {\n      return ko(new Error(`unable to determine host from issuer url ${issuerUrl}`));\n    }\n    const socket = tls.connect(port, purl.host, { rejectUnauthorized: false, servername: purl.host });\n    socket.once('error', ko);\n    socket.once('secureConnect', () => {\n      const cert = socket.getPeerCertificate();\n      socket.end();\n      const thumbprint = cert.fingerprint.split(':').join('');\n      external.log(`certificate authority thumbprint for ${issuerUrl} is ${thumbprint}`);\n      ok(thumbprint);\n    });\n  });\n}\n\n// allows unit test to replace with mocks\n/* eslint-disable max-len */\nexport const external = {\n  downloadThumbprint,\n  log: defaultLogger,\n  createOpenIDConnectProvider: (req: aws.IAM.CreateOpenIDConnectProviderRequest) => iam().createOpenIDConnectProvider(req).promise(),\n  deleteOpenIDConnectProvider: (req: aws.IAM.DeleteOpenIDConnectProviderRequest) => iam().deleteOpenIDConnectProvider(req).promise(),\n  updateOpenIDConnectProviderThumbprint: (req: aws.IAM.UpdateOpenIDConnectProviderThumbprintRequest) => iam().updateOpenIDConnectProviderThumbprint(req).promise(),\n  addClientIDToOpenIDConnectProvider: (req: aws.IAM.AddClientIDToOpenIDConnectProviderRequest) => iam().addClientIDToOpenIDConnectProvider(req).promise(),\n  removeClientIDFromOpenIDConnectProvider: (req: aws.IAM.RemoveClientIDFromOpenIDConnectProviderRequest) => iam().removeClientIDFromOpenIDConnectProvider(req).promise(),\n};\n"],
  "mappings": "4FAEA,KAAA,KAAA,QAAA,OACA,IAAA,QAAA,OAEA,IAAA,QAAA,WAEA,GAAI,QAEJ,cAAY,CACV,MAAK,SAAU,QAAS,GAAI,KAAI,KACzB,OAGT,uBAAuB,OAAgB,KAAW,CAEhD,QAAQ,IAAI,IAAK,GAAG,MAMtB,kCAAkC,UAAiB,CACjD,eAAA,SAAS,IAAI,oDAAoD,aAC1D,GAAI,SAAgB,CAAC,GAAI,KAAM,CACpC,KAAM,MAAO,IAAI,MAAM,WACjB,KAAO,KAAK,KAAO,SAAS,KAAK,KAAM,IAAM,IACnD,GAAI,CAAC,KAAK,KACR,MAAO,IAAG,GAAI,OAAM,4CAA4C,cAElE,KAAM,QAAS,IAAI,QAAQ,KAAM,KAAK,KAAM,CAAE,mBAAoB,GAAO,WAAY,KAAK,OAC1F,OAAO,KAAK,QAAS,IACrB,OAAO,KAAK,gBAAiB,IAAK,CAChC,KAAM,MAAO,OAAO,qBACpB,OAAO,MACP,KAAM,YAAa,KAAK,YAAY,MAAM,KAAK,KAAK,IACpD,QAAA,SAAS,IAAI,wCAAwC,gBAAgB,cACrE,GAAG,gBAOI,QAAA,SAAW,CACtB,mBACA,IAAK,cACL,4BAA6B,AAAC,KAAoD,MAAM,4BAA4B,KAAK,UACzH,4BAA6B,AAAC,KAAoD,MAAM,4BAA4B,KAAK,UACzH,sCAAuC,AAAC,KAA8D,MAAM,sCAAsC,KAAK,UACvJ,mCAAoC,AAAC,KAA2D,MAAM,mCAAmC,KAAK,UAC9I,wCAAyC,AAAC,KAAgE,MAAM,wCAAwC,KAAK",
  "names": []
}
