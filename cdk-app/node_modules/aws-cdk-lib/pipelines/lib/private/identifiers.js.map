{
  "version": 3,
  "sources": ["identifiers.ts"],
  "sourcesContent": ["import * as crypto from 'crypto';\nimport { StackDeployment } from '../blueprint/stack-deployment';\nimport { GraphNode } from '../helpers-internal/graph';\n\nexport function hash<A>(obj: A) {\n  const d = crypto.createHash('sha256');\n  d.update(JSON.stringify(obj));\n  return d.digest('hex');\n}\n\nexport function actionName<A>(node: GraphNode<A>, parent: GraphNode<A>) {\n  const names = node.ancestorPath(parent).map(n => n.id).map(sanitizeName);\n\n  // Something slightly complicated here:\n  //\n  // Because we'll have structured action names like:\n  //\n  //     'VeryLongStackName.Prepare', 'VeryLongStackName.Deploy'\n  //\n  // it would be shitty if cut and hashed them differently:\n  //\n  //     'VeryLongSAAAAA.Prepare', 'VeryLonBBBBBme.Deploy'\n  //\n  // wouldn't sort and comprehend nicely. We will therefore trim each component individually.\n  const totalMax = 100; // Max length of everything\n\n  // No need to do anything\n  if (names.join('.').length <= totalMax) {\n    return names.join('.');\n  }\n\n  const componentMin = 15; // Can't really go shorter than this, becomes unreadable\n  const dots = names.length - 1;\n  const maxLength = Math.max(componentMin, Math.floor((totalMax - dots) / names.length));\n  const trimmedNames = names.map(name => limitIdentifierLength(name, maxLength));\n\n  return limitIdentifierLength(trimmedNames.join('.'), totalMax); // Final trim in case we couldn't make it\n}\n\nexport function stackVariableNamespace(stack: StackDeployment) {\n  return limitIdentifierLength(stack.stackArtifactId, 100);\n}\n\nfunction sanitizeName(x: string): string {\n  return x.replace(/[^A-Za-z0-9.@\\-_]/g, '_');\n}\n\n\n/**\n * Makes sure the given identifier length does not exceed N characters\n *\n * Replaces characters in the middle (to leave the start and end identifiable) and replaces\n * them with a hash to prevent collissions.\n */\nexport function limitIdentifierLength(s: string, n: number): string {\n  if (s.length <= n) { return s; }\n  const h = hash(s).substr(0, 8);\n  const mid = Math.floor((n - h.length) / 2);\n\n  return s.substr(0, mid) + h + s.substr(s.length - mid);\n}\n"],
  "mappings": "wKAAA,KAAA,QAAA,QAAA,UAIA,cAAwB,IAAM,CAC5B,KAAM,GAAI,OAAO,WAAW,UAC5B,SAAE,OAAO,KAAK,UAAU,MACjB,EAAE,OAAO,OAHlB,QAAA,KAAA,KAMA,oBAA8B,KAAoB,OAAoB,CACpE,KAAM,OAAQ,KAAK,aAAa,QAAQ,IAAI,GAAK,EAAE,IAAI,IAAI,cAarD,SAAW,IAGjB,GAAI,MAAM,KAAK,KAAK,QAAU,SAC5B,MAAO,OAAM,KAAK,KAGpB,KAAM,cAAe,GACf,KAAO,MAAM,OAAS,EACtB,UAAY,KAAK,IAAI,aAAc,KAAK,MAAO,UAAW,MAAQ,MAAM,SACxE,aAAe,MAAM,IAAI,MAAQ,sBAAsB,KAAM,YAEnE,MAAO,uBAAsB,aAAa,KAAK,KAAM,UA1BvD,QAAA,WAAA,WA6BA,gCAAuC,MAAsB,CAC3D,MAAO,uBAAsB,MAAM,gBAAiB,KADtD,QAAA,uBAAA,uBAIA,sBAAsB,EAAS,CAC7B,MAAO,GAAE,QAAQ,qBAAsB,KAUzC,+BAAsC,EAAW,EAAS,CACxD,GAAI,EAAE,QAAU,EAAK,MAAO,GAC5B,KAAM,GAAI,KAAK,GAAG,OAAO,EAAG,GACtB,IAAM,KAAK,MAAO,GAAI,EAAE,QAAU,GAExC,MAAO,GAAE,OAAO,EAAG,KAAO,EAAI,EAAE,OAAO,EAAE,OAAS,KALpD,QAAA,sBAAA",
  "names": []
}
