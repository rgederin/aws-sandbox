{
  "version": 3,
  "sources": ["wave.ts"],
  "sourcesContent": ["import * as cdk from '../../../core';\nimport { StageDeployment } from './stage-deployment';\nimport { StackSteps, Step } from './step';\n\n/**\n * Construction properties for a `Wave`\n */\nexport interface WaveProps {\n  /**\n   * Additional steps to run before any of the stages in the wave\n   *\n   * @default - No additional steps\n   */\n  readonly pre?: Step[];\n\n  /**\n   * Additional steps to run after all of the stages in the wave\n   *\n   * @default - No additional steps\n   */\n  readonly post?: Step[];\n}\n\n/**\n * Multiple stages that are deployed in parallel\n */\nexport class Wave {\n  /**\n   * Additional steps that are run before any of the stages in the wave\n   */\n  public readonly pre: Step[];\n\n  /**\n   * Additional steps that are run after all of the stages in the wave\n   */\n  public readonly post: Step[];\n\n  /**\n   * The stages that are deployed in this wave\n   */\n  public readonly stages: StageDeployment[] = [];\n\n  constructor(\n    /** Identifier for this Wave */\n    public readonly id: string, props: WaveProps = {}) {\n    this.pre = props.pre ?? [];\n    this.post = props.post ?? [];\n  }\n\n  /**\n   * Add a Stage to this wave\n   *\n   * It will be deployed in parallel with all other stages in this\n   * wave.\n   */\n  public addStage(stage: cdk.Stage, options: AddStageOpts = {}) {\n    const ret = StageDeployment.fromStage(stage, options);\n    this.stages.push(ret);\n    return ret;\n  }\n\n  /**\n   * Add an additional step to run before any of the stages in this wave\n   */\n  public addPre(...steps: Step[]) {\n    this.pre.push(...steps);\n  }\n\n  /**\n   * Add an additional step to run after all of the stages in this wave\n   */\n  public addPost(...steps: Step[]) {\n    this.post.push(...steps);\n  }\n}\n\n/**\n * Options to pass to `addStage`\n */\nexport interface AddStageOpts {\n  /**\n   * Additional steps to run before any of the stacks in the stage\n   *\n   * @default - No additional steps\n   */\n  readonly pre?: Step[];\n\n  /**\n   * Additional steps to run after all of the stacks in the stage\n   *\n   * @default - No additional steps\n   */\n  readonly post?: Step[];\n\n  /**\n   * Instructions for stack level steps\n   *\n   * @default - No additional instructions\n   */\n  readonly stackSteps?: StackSteps[];\n}\n\n/**\n * Options to pass to `addWave`\n */\nexport interface WaveOptions {\n  /**\n   * Additional steps to run before any of the stages in the wave\n   *\n   * @default - No additional steps\n   */\n  readonly pre?: Step[];\n\n  /**\n   * Additional steps to run after all of the stages in the wave\n   *\n   * @default - No additional steps\n   */\n  readonly post?: Step[];\n}"],
  "mappings": "8MACA,mBAAA,QAAA,sBAyBA,UAAiB,CAgBf,YAEkB,GAAY,MAAmB,GAAE,WAAjC,KAAA,GAAA,GAJF,KAAA,OAA4B,kEAK1C,KAAK,IAAG,IAAG,MAAM,OAAG,MAAA,KAAA,OAAA,GAAI,GACxB,KAAK,KAAI,IAAG,MAAM,QAAI,MAAA,KAAA,OAAA,GAAI,GASrB,SAAS,MAAkB,QAAwB,GAAE,sHAC1D,KAAM,KAAM,mBAAA,gBAAgB,UAAU,MAAO,SAC7C,YAAK,OAAO,KAAK,KACV,IAMF,UAAU,MAAa,2DAC5B,KAAK,IAAI,KAAK,GAAG,OAMZ,WAAW,MAAa,2DAC7B,KAAK,KAAK,KAAK,GAAG,QA9CtB,QAAA,KAAA",
  "names": []
}
