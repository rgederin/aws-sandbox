{
  "version": 3,
  "sources": ["bundling.ts"],
  "sourcesContent": ["import * as os from 'os';\nimport * as path from 'path';\nimport { Architecture, AssetCode, Code, Runtime } from '../../aws-lambda';\nimport * as cdk from '../../core';\nimport { PackageInstallation } from './package-installation';\nimport { PackageManager } from './package-manager';\nimport { BundlingOptions, OutputFormat, SourceMapMode } from './types';\nimport { exec, extractDependencies, findUp, getTsconfigCompilerOptions } from './util';\n\nconst ESBUILD_MAJOR_VERSION = '0';\n\n/**\n * Bundling properties\n */\nexport interface BundlingProps extends BundlingOptions {\n  /**\n   * Path to lock file\n   */\n  readonly depsLockFilePath: string;\n\n  /**\n   * Entry file\n   */\n  readonly entry: string;\n\n  /**\n   * The runtime of the lambda function\n   */\n  readonly runtime: Runtime;\n\n  /**\n   * The system architecture of the lambda function\n   */\n  readonly architecture: Architecture;\n\n  /**\n   * Path to project root\n   */\n  readonly projectRoot: string;\n\n  /**\n   * Run compilation using `tsc` before bundling\n   */\n  readonly preCompilation?: boolean\n\n}\n\n/**\n * Bundling with esbuild\n */\nexport class Bundling implements cdk.BundlingOptions {\n  /**\n   * esbuild bundled Lambda asset code\n   */\n  public static bundle(options: BundlingProps): AssetCode {\n    return Code.fromAsset(options.projectRoot, {\n      assetHash: options.assetHash,\n      assetHashType: options.assetHash ? cdk.AssetHashType.CUSTOM : cdk.AssetHashType.OUTPUT,\n      bundling: new Bundling(options),\n    });\n  }\n\n  public static clearEsbuildInstallationCache(): void {\n    this.esbuildInstallation = undefined;\n  }\n\n  public static clearTscInstallationCache(): void {\n    this.tscInstallation = undefined;\n  }\n\n  private static esbuildInstallation?: PackageInstallation;\n  private static tscInstallation?: PackageInstallation;\n\n  // Core bundling options\n  public readonly image: cdk.DockerImage;\n  public readonly command: string[];\n  public readonly environment?: { [key: string]: string };\n  public readonly workingDirectory: string;\n  public readonly local?: cdk.ILocalBundling;\n\n  private readonly projectRoot: string;\n  private readonly relativeEntryPath: string;\n  private readonly relativeTsconfigPath?: string;\n  private readonly relativeDepsLockFilePath: string;\n  private readonly externals: string[];\n  private readonly packageManager: PackageManager;\n\n  constructor(private readonly props: BundlingProps) {\n    this.packageManager = PackageManager.fromLockFile(props.depsLockFilePath, props.logLevel);\n\n    Bundling.esbuildInstallation = Bundling.esbuildInstallation ?? PackageInstallation.detect('esbuild');\n    Bundling.tscInstallation = Bundling.tscInstallation ?? PackageInstallation.detect('tsc');\n\n    this.projectRoot = props.projectRoot;\n    this.relativeEntryPath = path.relative(this.projectRoot, path.resolve(props.entry));\n    this.relativeDepsLockFilePath = path.relative(this.projectRoot, path.resolve(props.depsLockFilePath));\n\n    if (this.relativeDepsLockFilePath.includes('..')) {\n      throw new Error(`Expected depsLockFilePath: ${props.depsLockFilePath} to be under projectRoot: ${this.projectRoot} (${this.relativeDepsLockFilePath})`);\n    }\n\n    if (props.tsconfig) {\n      this.relativeTsconfigPath = path.relative(this.projectRoot, path.resolve(props.tsconfig));\n    }\n\n    if (props.preCompilation && !/\\.tsx?$/.test(props.entry)) {\n      throw new Error('preCompilation can only be used with typescript files');\n    }\n\n    if (props.format === OutputFormat.ESM\n        && (props.runtime === Runtime.NODEJS_10_X || props.runtime === Runtime.NODEJS_12_X)) {\n      throw new Error(`ECMAScript module output format is not supported by the ${props.runtime.name} runtime`);\n    }\n\n    this.externals = [\n      ...props.externalModules ?? ['aws-sdk'], // Mark aws-sdk as external by default (available in the runtime)\n      ...props.nodeModules ?? [], // Mark the modules that we are going to install as externals also\n    ];\n\n    // Docker bundling\n    const shouldBuildImage = props.forceDockerBundling || !Bundling.esbuildInstallation;\n    this.image = shouldBuildImage ? props.dockerImage ?? cdk.DockerImage.fromBuild(path.join(__dirname, '../lib'),\n      {\n        buildArgs: {\n          ...props.buildArgs ?? {},\n          IMAGE: props.runtime.bundlingImage.image,\n          ESBUILD_VERSION: props.esbuildVersion ?? ESBUILD_MAJOR_VERSION,\n        },\n        platform: props.architecture.dockerPlatform,\n      })\n      : cdk.DockerImage.fromRegistry('dummy'); // Do not build if we don't need to\n\n    const bundlingCommand = this.createBundlingCommand({\n      inputDir: cdk.AssetStaging.BUNDLING_INPUT_DIR,\n      outputDir: cdk.AssetStaging.BUNDLING_OUTPUT_DIR,\n      esbuildRunner: 'esbuild', // esbuild is installed globally in the docker image\n      tscRunner: 'tsc', // tsc is installed globally in the docker image\n      osPlatform: 'linux', // linux docker image\n    });\n    this.command = ['bash', '-c', bundlingCommand];\n    this.environment = props.environment;\n    // Bundling sets the working directory to cdk.AssetStaging.BUNDLING_INPUT_DIR\n    // and we want to force npx to use the globally installed esbuild.\n    this.workingDirectory = '/';\n\n    // Local bundling\n    if (!props.forceDockerBundling) { // only if Docker is not forced\n      this.local = this.getLocalBundlingProvider();\n    }\n  }\n\n  private createBundlingCommand(options: BundlingCommandOptions): string {\n    const pathJoin = osPathJoin(options.osPlatform);\n    let relativeEntryPath = pathJoin(options.inputDir, this.relativeEntryPath);\n    let tscCommand = '';\n\n    if (this.props.preCompilation) {\n      const tsconfig = this.props.tsconfig ?? findUp('tsconfig.json', path.dirname(this.props.entry));\n      if (!tsconfig) {\n        throw new Error('Cannot find a `tsconfig.json` but `preCompilation` is set to `true`, please specify it via `tsconfig`');\n      }\n      const compilerOptions = getTsconfigCompilerOptions(tsconfig);\n      tscCommand = `${options.tscRunner} \"${relativeEntryPath}\" ${compilerOptions}`;\n      relativeEntryPath = relativeEntryPath.replace(/\\.ts(x?)$/, '.js$1');\n    }\n\n    const loaders = Object.entries(this.props.loader ?? {});\n    const defines = Object.entries(this.props.define ?? {});\n\n    if (this.props.sourceMap === false && this.props.sourceMapMode) {\n      throw new Error('sourceMapMode cannot be used when sourceMap is false');\n    }\n\n    const sourceMapEnabled = this.props.sourceMapMode ?? this.props.sourceMap;\n    const sourceMapMode = this.props.sourceMapMode ?? SourceMapMode.DEFAULT;\n    const sourceMapValue = sourceMapMode === SourceMapMode.DEFAULT ? '' : `=${this.props.sourceMapMode}`;\n    const sourcesContent = this.props.sourcesContent ?? true;\n\n    const outFile = this.props.format === OutputFormat.ESM ? 'index.mjs' : 'index.js';\n    const esbuildCommand: string[] = [\n      options.esbuildRunner,\n      '--bundle', `\"${relativeEntryPath}\"`,\n      `--target=${this.props.target ?? toTarget(this.props.runtime)}`,\n      '--platform=node',\n      ...this.props.format ? [`--format=${this.props.format}`] : [],\n      `--outfile=\"${pathJoin(options.outputDir, outFile)}\"`,\n      ...this.props.minify ? ['--minify'] : [],\n      ...sourceMapEnabled ? [`--sourcemap${sourceMapValue}`] : [],\n      ...sourcesContent ? [] : [`--sources-content=${sourcesContent}`],\n      ...this.externals.map(external => `--external:${external}`),\n      ...loaders.map(([ext, name]) => `--loader:${ext}=${name}`),\n      ...defines.map(([key, value]) => `--define:${key}=${JSON.stringify(value)}`),\n      ...this.props.logLevel ? [`--log-level=${this.props.logLevel}`] : [],\n      ...this.props.keepNames ? ['--keep-names'] : [],\n      ...this.relativeTsconfigPath ? [`--tsconfig=${pathJoin(options.inputDir, this.relativeTsconfigPath)}`] : [],\n      ...this.props.metafile ? [`--metafile=${pathJoin(options.outputDir, 'index.meta.json')}`] : [],\n      ...this.props.banner ? [`--banner:js=${JSON.stringify(this.props.banner)}`] : [],\n      ...this.props.footer ? [`--footer:js=${JSON.stringify(this.props.footer)}`] : [],\n      ...this.props.charset ? [`--charset=${this.props.charset}`] : [],\n      ...this.props.mainFields ? [`--main-fields=${this.props.mainFields.join(',')}`] : [],\n    ];\n\n    let depsCommand = '';\n    if (this.props.nodeModules) {\n      // Find 'package.json' closest to entry folder, we are going to extract the\n      // modules versions from it.\n      const pkgPath = findUp('package.json', path.dirname(this.props.entry));\n      if (!pkgPath) {\n        throw new Error('Cannot find a `package.json` in this project. Using `nodeModules` requires a `package.json`.');\n      }\n\n      // Determine dependencies versions, lock file and installer\n      const dependencies = extractDependencies(pkgPath, this.props.nodeModules);\n      const osCommand = new OsCommand(options.osPlatform);\n\n      const lockFilePath = pathJoin(options.inputDir, this.relativeDepsLockFilePath ?? this.packageManager.lockFile);\n\n      // Create dummy package.json, copy lock file if any and then install\n      depsCommand = chain([\n        osCommand.writeJson(pathJoin(options.outputDir, 'package.json'), { dependencies }),\n        osCommand.copy(lockFilePath, pathJoin(options.outputDir, this.packageManager.lockFile)),\n        osCommand.changeDirectory(options.outputDir),\n        this.packageManager.installCommand.join(' '),\n      ]);\n    }\n\n    return chain([\n      ...this.props.commandHooks?.beforeBundling(options.inputDir, options.outputDir) ?? [],\n      tscCommand,\n      esbuildCommand.join(' '),\n      ...(this.props.nodeModules && this.props.commandHooks?.beforeInstall(options.inputDir, options.outputDir)) ?? [],\n      depsCommand,\n      ...this.props.commandHooks?.afterBundling(options.inputDir, options.outputDir) ?? [],\n    ]);\n  }\n\n  private getLocalBundlingProvider(): cdk.ILocalBundling {\n    const osPlatform = os.platform();\n    const createLocalCommand = (outputDir: string, esbuild: PackageInstallation, tsc?: PackageInstallation) => this.createBundlingCommand({\n      inputDir: this.projectRoot,\n      outputDir,\n      esbuildRunner: esbuild.isLocal ? this.packageManager.runBinCommand('esbuild') : 'esbuild',\n      tscRunner: tsc && (tsc.isLocal ? this.packageManager.runBinCommand('tsc') : 'tsc'),\n      osPlatform,\n    });\n    const environment = this.props.environment ?? {};\n    const cwd = this.projectRoot;\n\n    return {\n      tryBundle(outputDir: string) {\n        if (!Bundling.esbuildInstallation) {\n          process.stderr.write('esbuild cannot run locally. Switching to Docker bundling.\\n');\n          return false;\n        }\n\n        if (!Bundling.esbuildInstallation.version.startsWith(`${ESBUILD_MAJOR_VERSION}.`)) {\n          throw new Error(`Expected esbuild version ${ESBUILD_MAJOR_VERSION}.x but got ${Bundling.esbuildInstallation.version}`);\n        }\n\n        const localCommand = createLocalCommand(outputDir, Bundling.esbuildInstallation, Bundling.tscInstallation);\n\n        exec(\n          osPlatform === 'win32' ? 'cmd' : 'bash',\n          [\n            osPlatform === 'win32' ? '/c' : '-c',\n            localCommand,\n          ],\n          {\n            env: { ...process.env, ...environment },\n            stdio: [ // show output\n              'ignore', // ignore stdio\n              process.stderr, // redirect stdout to stderr\n              'inherit', // inherit stderr\n            ],\n            cwd,\n            windowsVerbatimArguments: osPlatform === 'win32',\n          });\n\n        return true;\n      },\n    };\n  }\n}\n\ninterface BundlingCommandOptions {\n  readonly inputDir: string;\n  readonly outputDir: string;\n  readonly esbuildRunner: string;\n  readonly tscRunner?: string;\n  readonly osPlatform: NodeJS.Platform;\n}\n\n/**\n * OS agnostic command\n */\nclass OsCommand {\n  constructor(private readonly osPlatform: NodeJS.Platform) {}\n\n  public writeJson(filePath: string, data: any): string {\n    const stringifiedData = JSON.stringify(data);\n    if (this.osPlatform === 'win32') {\n      return `echo ^${stringifiedData}^ > \"${filePath}\"`;\n    }\n\n    return `echo '${stringifiedData}' > \"${filePath}\"`;\n  }\n\n  public copy(src: string, dest: string): string {\n    if (this.osPlatform === 'win32') {\n      return `copy \"${src}\" \"${dest}\"`;\n    }\n\n    return `cp \"${src}\" \"${dest}\"`;\n  }\n\n  public changeDirectory(dir: string): string {\n    return `cd \"${dir}\"`;\n  }\n}\n\n/**\n * Chain commands\n */\nfunction chain(commands: string[]): string {\n  return commands.filter(c => !!c).join(' && ');\n}\n\n/**\n * Platform specific path join\n */\nfunction osPathJoin(platform: NodeJS.Platform) {\n  return function(...paths: string[]): string {\n    const joined = path.join(...paths);\n    // If we are on win32 but need posix style paths\n    if (os.platform() === 'win32' && platform !== 'win32') {\n      return joined.replace(/\\\\/g, '/');\n    }\n    return joined;\n  };\n}\n\n/**\n * Converts a runtime to an esbuild node target\n */\nfunction toTarget(runtime: Runtime): string {\n  const match = runtime.name.match(/nodejs(\\d+)/);\n\n  if (!match) {\n    throw new Error('Cannot extract version from runtime.');\n  }\n\n  return `node${match[1]}`;\n}\n"],
  "mappings": "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",
  "names": []
}
