{
  "version": 3,
  "sources": ["integ.pipeline-ecs-separate-source.lit.ts"],
  "sourcesContent": ["/// !cdk-integ *\n\nimport * as codebuild from '../../aws-codebuild';\nimport * as codecommit from '../../aws-codecommit';\nimport * as codepipeline from '../../aws-codepipeline';\nimport * as ec2 from '../../aws-ec2';\nimport * as ecr from '../../aws-ecr';\nimport * as ecs from '../../aws-ecs';\nimport * as s3 from '../../aws-s3';\nimport * as cdk from '../../core';\nimport { Construct } from 'constructs';\nimport * as codepipeline_actions from '../lib';\n\n/**\n * This example demonstrates how to create a CodePipeline that deploys an ECS Service\n * from a different source repository than the source repository of your CDK code.\n * If your application code and your CDK code are in the same repository,\n * use the CDK Pipelines module instead of this method.\n */\n\n/// !show\n\n/**\n * These are the construction properties for {@link EcsAppStack}.\n * They extend the standard Stack properties,\n * but also require providing the ContainerImage that the service will use.\n * That Image will be provided from the Stack containing the CodePipeline.\n */\nexport interface EcsAppStackProps extends cdk.StackProps {\n  readonly image: ecs.ContainerImage;\n}\n\n/**\n * This is the Stack containing a simple ECS Service that uses the provided ContainerImage.\n */\nexport class EcsAppStack extends cdk.Stack {\n  constructor(scope: Construct, id: string, props: EcsAppStackProps) {\n    super(scope, id, props);\n\n    const taskDefinition = new ecs.TaskDefinition(this, 'TaskDefinition', {\n      compatibility: ecs.Compatibility.FARGATE,\n      cpu: '1024',\n      memoryMiB: '2048',\n    });\n    taskDefinition.addContainer('AppContainer', {\n      image: props.image,\n    });\n    new ecs.FargateService(this, 'EcsService', {\n      taskDefinition,\n      cluster: new ecs.Cluster(this, 'Cluster', {\n        vpc: new ec2.Vpc(this, 'Vpc', {\n          maxAzs: 1,\n        }),\n      }),\n    });\n  }\n}\n\n/**\n * This is the Stack containing the CodePipeline definition that deploys an ECS Service.\n */\nexport class PipelineStack extends cdk.Stack {\n  public readonly tagParameterContainerImage: ecs.TagParameterContainerImage;\n\n  constructor(scope: Construct, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    /* ********** ECS part **************** */\n\n    // this is the ECR repository where the built Docker image will be pushed\n    const appEcrRepo = new ecr.Repository(this, 'EcsDeployRepository');\n    // the build that creates the Docker image, and pushes it to the ECR repo\n    const appCodeDockerBuild = new codebuild.PipelineProject(this, 'AppCodeDockerImageBuildAndPushProject', {\n      environment: {\n        // we need to run Docker\n        privileged: true,\n      },\n      buildSpec: codebuild.BuildSpec.fromObject({\n        version: '0.2',\n        phases: {\n          build: {\n            commands: [\n              // login to ECR first\n              '$(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)',\n              // if your application needs any build steps, they would be invoked here\n\n              // build the image, and tag it with the commit hash\n              // (CODEBUILD_RESOLVED_SOURCE_VERSION is a special environment variable available in CodeBuild)\n              'docker build -t $REPOSITORY_URI:$CODEBUILD_RESOLVED_SOURCE_VERSION .',\n            ],\n          },\n          post_build: {\n            commands: [\n              // push the built image into the ECR repository\n              'docker push $REPOSITORY_URI:$CODEBUILD_RESOLVED_SOURCE_VERSION',\n              // save the declared tag as an environment variable,\n              // that is then exported below in the 'exported-variables' section as a CodePipeline Variable\n              'export imageTag=$CODEBUILD_RESOLVED_SOURCE_VERSION',\n            ],\n          },\n        },\n        env: {\n          // save the imageTag environment variable as a CodePipeline Variable\n          'exported-variables': [\n            'imageTag',\n          ],\n        },\n      }),\n      environmentVariables: {\n        REPOSITORY_URI: {\n          value: appEcrRepo.repositoryUri,\n        },\n      },\n    });\n    // needed for `docker push`\n    appEcrRepo.grantPullPush(appCodeDockerBuild);\n    // create the ContainerImage used for the ECS application Stack\n    this.tagParameterContainerImage = new ecs.TagParameterContainerImage(appEcrRepo);\n\n    const cdkCodeBuild = new codebuild.PipelineProject(this, 'CdkCodeBuildProject', {\n      buildSpec: codebuild.BuildSpec.fromObject({\n        version: '0.2',\n        phases: {\n          install: {\n            commands: [\n              'npm install',\n            ],\n          },\n          build: {\n            commands: [\n              // synthesize the CDK code for the ECS application Stack\n              'npx cdk synth --verbose',\n            ],\n          },\n        },\n        artifacts: {\n          // store the entire Cloud Assembly as the output artifact\n          'base-directory': 'cdk.out',\n          'files': '**/*',\n        },\n      }),\n    });\n\n    /* ********** Pipeline part **************** */\n\n    const appCodeSourceOutput = new codepipeline.Artifact();\n    const cdkCodeSourceOutput = new codepipeline.Artifact();\n    const cdkCodeBuildOutput = new codepipeline.Artifact();\n    const appCodeBuildAction = new codepipeline_actions.CodeBuildAction({\n      actionName: 'AppCodeDockerImageBuildAndPush',\n      project: appCodeDockerBuild,\n      input: appCodeSourceOutput,\n    });\n    new codepipeline.Pipeline(this, 'CodePipelineDeployingEcsApplication', {\n      artifactBucket: new s3.Bucket(this, 'ArtifactBucket', {\n        removalPolicy: cdk.RemovalPolicy.DESTROY,\n      }),\n      stages: [\n        {\n          stageName: 'Source',\n          actions: [\n            // this is the Action that takes the source of your application code\n            new codepipeline_actions.CodeCommitSourceAction({\n              actionName: 'AppCodeSource',\n              repository: new codecommit.Repository(this, 'AppCodeSourceRepository', { repositoryName: 'AppCodeSourceRepository' }),\n              output: appCodeSourceOutput,\n            }),\n            // this is the Action that takes the source of your CDK code\n            // (which would probably include this Pipeline code as well)\n            new codepipeline_actions.CodeCommitSourceAction({\n              actionName: 'CdkCodeSource',\n              repository: new codecommit.Repository(this, 'CdkCodeSourceRepository', { repositoryName: 'CdkCodeSourceRepository' }),\n              output: cdkCodeSourceOutput,\n            }),\n          ],\n        },\n        {\n          stageName: 'Build',\n          actions: [\n            appCodeBuildAction,\n            new codepipeline_actions.CodeBuildAction({\n              actionName: 'CdkCodeBuildAndSynth',\n              project: cdkCodeBuild,\n              input: cdkCodeSourceOutput,\n              outputs: [cdkCodeBuildOutput],\n            }),\n          ],\n        },\n        {\n          stageName: 'Deploy',\n          actions: [\n            new codepipeline_actions.CloudFormationCreateUpdateStackAction({\n              actionName: 'CFN_Deploy',\n              stackName: 'SampleEcsStackDeployedFromCodePipeline',\n              // this name has to be the same name as used below in the CDK code for the application Stack\n              templatePath: cdkCodeBuildOutput.atPath('EcsStackDeployedInPipeline.template.json'),\n              adminPermissions: true,\n              parameterOverrides: {\n                // read the tag pushed to the ECR repository from the CodePipeline Variable saved by the application build step,\n                // and pass it as the CloudFormation Parameter for the tag\n                [this.tagParameterContainerImage.tagParameterName]: appCodeBuildAction.variable('imageTag'),\n              },\n            }),\n          ],\n        },\n      ],\n    });\n  }\n}\n\nconst app = new cdk.App();\n\n// the CodePipeline Stack needs to be created first\nconst pipelineStack = new PipelineStack(app, 'aws-cdk-pipeline-ecs-separate-sources');\n// we supply the image to the ECS application Stack from the CodePipeline Stack\nnew EcsAppStack(app, 'EcsStackDeployedInPipeline', {\n  image: pipelineStack.tagParameterContainerImage,\n});\n/// !hide\n\napp.synth();\n"],
  "mappings": "qHAEA,KAAA,WAAA,QAAA,uBACA,WAAA,QAAA,wBACA,aAAA,QAAA,0BACA,IAAA,QAAA,iBACA,IAAA,QAAA,iBACA,IAAA,QAAA,iBACA,GAAA,QAAA,gBACA,IAAA,QAAA,cAEA,qBAAA,QAAA,UAwBA,yBAAiC,KAAI,KAAK,CACxC,YAAY,MAAkB,GAAY,MAAuB,CAC/D,MAAM,MAAO,GAAI,OAEjB,KAAM,gBAAiB,GAAI,KAAI,eAAe,KAAM,iBAAkB,CACpE,cAAe,IAAI,cAAc,QACjC,IAAK,OACL,UAAW,SAEb,eAAe,aAAa,eAAgB,CAC1C,MAAO,MAAM,QAEf,GAAI,KAAI,eAAe,KAAM,aAAc,CACzC,eACA,QAAS,GAAI,KAAI,QAAQ,KAAM,UAAW,CACxC,IAAK,GAAI,KAAI,IAAI,KAAM,MAAO,CAC5B,OAAQ,SAhBlB,QAAA,YAAA,YA0BA,2BAAmC,KAAI,KAAK,CAG1C,YAAY,MAAkB,GAAY,MAAsB,CAC9D,MAAM,MAAO,GAAI,OAKjB,KAAM,YAAa,GAAI,KAAI,WAAW,KAAM,uBAEtC,mBAAqB,GAAI,WAAU,gBAAgB,KAAM,wCAAyC,CACtG,YAAa,CAEX,WAAY,IAEd,UAAW,UAAU,UAAU,WAAW,CACxC,QAAS,MACT,OAAQ,CACN,MAAO,CACL,SAAU,CAER,uEAKA,yEAGJ,WAAY,CACV,SAAU,CAER,iEAGA,wDAIN,IAAK,CAEH,qBAAsB,CACpB,eAIN,qBAAsB,CACpB,eAAgB,CACd,MAAO,WAAW,kBAKxB,WAAW,cAAc,oBAEzB,KAAK,2BAA6B,GAAI,KAAI,2BAA2B,YAErE,KAAM,cAAe,GAAI,WAAU,gBAAgB,KAAM,sBAAuB,CAC9E,UAAW,UAAU,UAAU,WAAW,CACxC,QAAS,MACT,OAAQ,CACN,QAAS,CACP,SAAU,CACR,gBAGJ,MAAO,CACL,SAAU,CAER,6BAIN,UAAW,CAET,iBAAkB,UAClB,MAAS,YAOT,oBAAsB,GAAI,cAAa,SACvC,oBAAsB,GAAI,cAAa,SACvC,mBAAqB,GAAI,cAAa,SACtC,mBAAqB,GAAI,sBAAqB,gBAAgB,CAClE,WAAY,iCACZ,QAAS,mBACT,MAAO,sBAET,GAAI,cAAa,SAAS,KAAM,sCAAuC,CACrE,eAAgB,GAAI,IAAG,OAAO,KAAM,iBAAkB,CACpD,cAAe,IAAI,cAAc,UAEnC,OAAQ,CACN,CACE,UAAW,SACX,QAAS,CAEP,GAAI,sBAAqB,uBAAuB,CAC9C,WAAY,gBACZ,WAAY,GAAI,YAAW,WAAW,KAAM,0BAA2B,CAAE,eAAgB,4BACzF,OAAQ,sBAIV,GAAI,sBAAqB,uBAAuB,CAC9C,WAAY,gBACZ,WAAY,GAAI,YAAW,WAAW,KAAM,0BAA2B,CAAE,eAAgB,4BACzF,OAAQ,wBAId,CACE,UAAW,QACX,QAAS,CACP,mBACA,GAAI,sBAAqB,gBAAgB,CACvC,WAAY,uBACZ,QAAS,aACT,MAAO,oBACP,QAAS,CAAC,wBAIhB,CACE,UAAW,SACX,QAAS,CACP,GAAI,sBAAqB,sCAAsC,CAC7D,WAAY,aACZ,UAAW,yCAEX,aAAc,mBAAmB,OAAO,4CACxC,iBAAkB,GAClB,mBAAoB,EAGjB,KAAK,2BAA2B,kBAAmB,mBAAmB,SAAS,qBA3IhG,QAAA,cAAA,cAqJA,KAAM,KAAM,GAAI,KAAI,IAGd,cAAgB,GAAI,eAAc,IAAK,yCAE7C,GAAI,aAAY,IAAK,6BAA8B,CACjD,MAAO,cAAc,6BAIvB,IAAI",
  "names": []
}
