{
  "version": 3,
  "sources": ["singleton-policy.ts"],
  "sourcesContent": ["import * as iam from '../../../../aws-iam';\nimport * as cdk from '../../../../core';\n\n// keep this import separate from other imports to reduce chance for merge conflicts with v2-main\n// eslint-disable-next-line no-duplicate-imports, import/order\nimport { Construct } from 'constructs';\n\n/**\n * Manages a bunch of singleton-y statements on the policy of an IAM Role.\n * Dedicated methods can be used to add specific permissions to the role policy\n * using as few statements as possible (adding resources to existing compatible\n * statements instead of adding new statements whenever possible).\n *\n * Statements created outside of this class are not considered when adding new\n * permissions.\n */\nexport class SingletonPolicy extends Construct implements iam.IGrantable {\n  /**\n   * Obtain a SingletonPolicy for a given role.\n   * @param role the Role this policy is bound to.\n   * @returns the SingletonPolicy for this role.\n   */\n  public static forRole(role: iam.IRole): SingletonPolicy {\n    const found = role.node.tryFindChild(SingletonPolicy.UUID);\n    return (found as SingletonPolicy) || new SingletonPolicy(role);\n  }\n\n  private static readonly UUID = '8389e75f-0810-4838-bf64-d6f85a95cf83';\n\n  public readonly grantPrincipal: iam.IPrincipal;\n\n  private statements: { [key: string]: iam.PolicyStatement } = {};\n\n  private constructor(private readonly role: iam.IRole) {\n    super(role as unknown as Construct, SingletonPolicy.UUID);\n    this.grantPrincipal = role;\n  }\n\n  public grantExecuteChangeSet(props: { stackName: string, changeSetName: string, region?: string }): void {\n    this.statementFor({\n      actions: [\n        'cloudformation:DescribeStacks',\n        'cloudformation:DescribeChangeSet',\n        'cloudformation:ExecuteChangeSet',\n      ],\n      conditions: {\u00A0StringEqualsIfExists: { 'cloudformation:ChangeSetName': props.changeSetName } },\n    }).addResources(this.stackArnFromProps(props));\n  }\n\n  public grantCreateReplaceChangeSet(props: { stackName: string, changeSetName: string, region?: string }): void {\n    this.statementFor({\n      actions: [\n        'cloudformation:CreateChangeSet',\n        'cloudformation:DeleteChangeSet',\n        'cloudformation:DescribeChangeSet',\n        'cloudformation:DescribeStacks',\n      ],\n      conditions: { StringEqualsIfExists: { 'cloudformation:ChangeSetName': props.changeSetName } },\n    }).addResources(this.stackArnFromProps(props));\n  }\n\n  public grantCreateUpdateStack(props: { stackName: string, replaceOnFailure?: boolean, region?: string }): void {\n    const actions = [\n      'cloudformation:DescribeStack*',\n      'cloudformation:CreateStack',\n      'cloudformation:UpdateStack',\n      'cloudformation:GetTemplate*',\n      'cloudformation:ValidateTemplate',\n      'cloudformation:GetStackPolicy',\n      'cloudformation:SetStackPolicy',\n    ];\n    if (props.replaceOnFailure) {\n      actions.push('cloudformation:DeleteStack');\n    }\n    this.statementFor({ actions }).addResources(this.stackArnFromProps(props));\n  }\n\n  public grantCreateUpdateStackSet(props: { stackSetName: string, region?: string }): void {\n    const actions = [\n      'cloudformation:CreateStackSet',\n      'cloudformation:UpdateStackSet',\n      'cloudformation:DescribeStackSet',\n      'cloudformation:DescribeStackSetOperation',\n      'cloudformation:ListStackInstances',\n      'cloudformation:CreateStackInstances',\n    ];\n    this.statementFor({ actions }).addResources(this.stackSetArnFromProps(props));\n  }\n\n  public grantDeleteStack(props: { stackName: string, region?: string }): void {\n    this.statementFor({\n      actions: [\n        'cloudformation:DescribeStack*',\n        'cloudformation:DeleteStack',\n      ],\n    }).addResources(this.stackArnFromProps(props));\n  }\n\n  public grantPassRole(role: iam.IRole | string): void {\n    this.statementFor({ actions: ['iam:PassRole'] }).addResources(typeof role === 'string' ? role : role.roleArn);\n  }\n\n  private statementFor(template: StatementTemplate): iam.PolicyStatement {\n    const key = keyFor(template);\n    if (!(key in this.statements)) {\n      this.statements[key] = new iam.PolicyStatement({ actions: template.actions });\n      if (template.conditions) {\n        this.statements[key].addConditions(template.conditions);\n      }\n      this.role.addToPolicy(this.statements[key]);\n    }\n    return this.statements[key];\n\n    function keyFor(props: StatementTemplate): string {\n      const actions = `${props.actions.sort().join('\\x1F')}`;\n      const conditions = formatConditions(props.conditions);\n      return `${actions}\\x1D${conditions}`;\n\n      function formatConditions(cond?: StatementCondition): string {\n        if (cond == null) { return ''; }\n        let result = '';\n        for (const op of Object.keys(cond).sort()) {\n          result += `${op}\\x1E`;\n          const condition = cond[op];\n          for (const attribute of Object.keys(condition).sort()) {\n            const value = condition[attribute];\n            result += `${value}\\x1F`;\n          }\n        }\n        return result;\n      }\n    }\n  }\n\n  private stackArnFromProps(props: { stackName: string, region?: string }): string {\n    return cdk.Stack.of(this).formatArn({\n      region: props.region,\n      service: 'cloudformation',\n      resource: 'stack',\n      resourceName: `${props.stackName}/*`,\n    });\n  }\n\n  private stackSetArnFromProps(props: { stackSetName: string, region?: string }): string {\n    return cdk.Stack.of(this).formatArn({\n      region: props.region,\n      service: 'cloudformation',\n      resource: 'stackset',\n      resourceName: `${props.stackSetName}:*`,\n    });\n  }\n}\n\nexport interface StatementTemplate {\n  actions: string[];\n  conditions?: StatementCondition;\n}\n\nexport type StatementCondition = { [op: string]: { [attribute: string]: string } };\n\nexport function parseCapabilities(capabilities: cdk.CfnCapabilities[] | undefined): string | undefined {\n  if (capabilities === undefined) {\n    return undefined;\n  } else if (capabilities.length === 1) {\n    const capability = capabilities.toString();\n    return (capability === '') ? undefined : capability;\n  } else if (capabilities.length > 1) {\n    return capabilities.join(',');\n  }\n\n  return undefined;\n}"],
  "mappings": "6HAAA,KAAA,KAAA,QAAA,uBACA,IAAA,QAAA,oBAIA,aAAA,QAAA,cAWA,6BAAqC,cAAA,SAAS,CAiB5C,YAAqC,KAAe,CAClD,MAAM,KAA8B,gBAAgB,MADjB,KAAA,KAAA,KAF7B,KAAA,WAAqD,GAI3D,KAAK,eAAiB,WAbV,SAAQ,KAAe,CAEnC,MAAQ,AADM,MAAK,KAAK,aAAa,gBAAgB,OAChB,GAAI,iBAAgB,MAcpD,sBAAsB,MAAoE,CAC/F,KAAK,aAAa,CAChB,QAAS,CACP,gCACA,mCACA,mCAEF,WAAY,CAAE,qBAAsB,CAAE,+BAAgC,MAAM,kBAC3E,aAAa,KAAK,kBAAkB,QAGlC,4BAA4B,MAAoE,CACrG,KAAK,aAAa,CAChB,QAAS,CACP,iCACA,iCACA,mCACA,iCAEF,WAAY,CAAE,qBAAsB,CAAE,+BAAgC,MAAM,kBAC3E,aAAa,KAAK,kBAAkB,QAGlC,uBAAuB,MAAyE,CACrG,KAAM,SAAU,CACd,gCACA,6BACA,6BACA,8BACA,kCACA,gCACA,iCAEF,AAAI,MAAM,kBACR,QAAQ,KAAK,8BAEf,KAAK,aAAa,CAAE,UAAW,aAAa,KAAK,kBAAkB,QAG9D,0BAA0B,MAAgD,CAC/E,KAAM,SAAU,CACd,gCACA,gCACA,kCACA,2CACA,oCACA,uCAEF,KAAK,aAAa,CAAE,UAAW,aAAa,KAAK,qBAAqB,QAGjE,iBAAiB,MAA6C,CACnE,KAAK,aAAa,CAChB,QAAS,CACP,gCACA,gCAED,aAAa,KAAK,kBAAkB,QAGlC,cAAc,KAAwB,CAC3C,KAAK,aAAa,CAAE,QAAS,CAAC,kBAAmB,aAAa,MAAO,OAAS,SAAW,KAAO,KAAK,SAG/F,aAAa,SAA2B,CAC9C,KAAM,KAAM,OAAO,UACnB,MAAM,OAAO,MAAK,YAChB,MAAK,WAAW,KAAO,GAAI,KAAI,gBAAgB,CAAE,QAAS,SAAS,UAC/D,SAAS,YACX,KAAK,WAAW,KAAK,cAAc,SAAS,YAE9C,KAAK,KAAK,YAAY,KAAK,WAAW,OAEjC,KAAK,WAAW,KAEvB,gBAAgB,MAAwB,CACtC,KAAM,SAAU,GAAG,MAAM,QAAQ,OAAO,KAAK,OACvC,WAAa,iBAAiB,MAAM,YAC1C,MAAO,GAAG,WAAc,aAExB,0BAA0B,KAAyB,CACjD,GAAI,MAAQ,KAAQ,MAAO,GAC3B,GAAI,QAAS,GACb,SAAW,MAAM,QAAO,KAAK,MAAM,OAAQ,CACzC,QAAU,GAAG,MACb,KAAM,WAAY,KAAK,IACvB,SAAW,aAAa,QAAO,KAAK,WAAW,OAE7C,QAAU,GADI,UAAU,cAI5B,MAAO,UAKL,kBAAkB,MAA6C,CACrE,MAAO,KAAI,MAAM,GAAG,MAAM,UAAU,CAClC,OAAQ,MAAM,OACd,QAAS,iBACT,SAAU,QACV,aAAc,GAAG,MAAM,gBAInB,qBAAqB,MAAgD,CAC3E,MAAO,KAAI,MAAM,GAAG,MAAM,UAAU,CAClC,OAAQ,MAAM,OACd,QAAS,iBACT,SAAU,WACV,aAAc,GAAG,MAAM,oBApI7B,QAAA,gBAAA,gBAW0B,gBAAA,KAAO,uCAqIjC,2BAAkC,aAA+C,CAC/E,GAAI,eAAiB,QAEd,GAAI,aAAa,SAAW,EAAG,CACpC,KAAM,YAAa,aAAa,WAChC,MAAQ,cAAe,GAAM,OAAY,mBAChC,aAAa,OAAS,EAC/B,MAAO,cAAa,KAAK,MAP7B,QAAA,kBAAA",
  "names": []
}
