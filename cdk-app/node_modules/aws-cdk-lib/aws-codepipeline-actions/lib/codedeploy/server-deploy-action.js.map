{
  "version": 3,
  "sources": ["server-deploy-action.ts"],
  "sourcesContent": ["import * as codedeploy from '../../../aws-codedeploy';\nimport * as codepipeline from '../../../aws-codepipeline';\nimport * as iam from '../../../aws-iam';\nimport { Action } from '../action';\nimport { deployArtifactBounds } from '../common';\n\n// keep this import separate from other imports to reduce chance for merge conflicts with v2-main\n// eslint-disable-next-line no-duplicate-imports, import/order\nimport { Construct } from 'constructs';\n\n/**\n * Construction properties of the {@link CodeDeployServerDeployAction CodeDeploy server deploy CodePipeline Action}.\n */\nexport interface CodeDeployServerDeployActionProps extends codepipeline.CommonAwsActionProps {\n  /**\n   * The source to use as input for deployment.\n   */\n  readonly input: codepipeline.Artifact;\n\n  /**\n   * The CodeDeploy server Deployment Group to deploy to.\n   */\n  readonly deploymentGroup: codedeploy.IServerDeploymentGroup;\n}\n\nexport class CodeDeployServerDeployAction extends Action {\n  private readonly deploymentGroup: codedeploy.IServerDeploymentGroup;\n\n  constructor(props: CodeDeployServerDeployActionProps) {\n    super({\n      ...props,\n      resource: props.deploymentGroup,\n      category: codepipeline.ActionCategory.DEPLOY,\n      provider: 'CodeDeploy',\n      artifactBounds: deployArtifactBounds(),\n      inputs: [props.input],\n    });\n\n    this.deploymentGroup = props.deploymentGroup;\n  }\n\n  protected bound(_scope: Construct, _stage: codepipeline.IStage, options: codepipeline.ActionBindOptions):\n  codepipeline.ActionConfig {\n    // permissions, based on:\n    // https://docs.aws.amazon.com/codedeploy/latest/userguide/auth-and-access-control-permissions-reference.html\n\n    options.role.addToPolicy(new iam.PolicyStatement({\n      resources: [this.deploymentGroup.application.applicationArn],\n      actions: ['codedeploy:GetApplicationRevision', 'codedeploy:RegisterApplicationRevision'],\n    }));\n\n    options.role.addToPolicy(new iam.PolicyStatement({\n      resources: [this.deploymentGroup.deploymentGroupArn],\n      actions: ['codedeploy:CreateDeployment', 'codedeploy:GetDeployment'],\n    }));\n\n    options.role.addToPolicy(new iam.PolicyStatement({\n      resources: [this.deploymentGroup.deploymentConfig.deploymentConfigArn],\n      actions: ['codedeploy:GetDeploymentConfig'],\n    }));\n\n    // grant the ASG Role permissions to read from the Pipeline Bucket\n    for (const asg of this.deploymentGroup.autoScalingGroups || []) {\n      options.bucket.grantRead(asg);\n    }\n\n    // the Action's Role needs to read from the Bucket to get artifacts\n    options.bucket.grantRead(options.role);\n\n    return {\n      configuration: {\n        ApplicationName: this.deploymentGroup.application.applicationName,\n        DeploymentGroupName: this.deploymentGroup.deploymentGroupName,\n      },\n    };\n  }\n}\n"],
  "mappings": "sOACA,aAAA,QAAA,6BACA,IAAA,QAAA,oBACA,SAAA,QAAA,aACA,SAAA,QAAA,aAqBA,0CAAkD,UAAA,MAAM,CAGtD,YAAY,MAAwC,CAClD,MAAM,IACD,MACH,SAAU,MAAM,gBAChB,SAAU,aAAa,eAAe,OACtC,SAAU,aACV,eAAgB,SAAA,uBAChB,OAAQ,CAAC,MAAM,+GAGjB,KAAK,gBAAkB,MAAM,gBAGrB,MAAM,OAAmB,OAA6B,QAAuC,qJAKrG,QAAQ,KAAK,YAAY,GAAI,KAAI,gBAAgB,CAC/C,UAAW,CAAC,KAAK,gBAAgB,YAAY,gBAC7C,QAAS,CAAC,oCAAqC,6CAGjD,QAAQ,KAAK,YAAY,GAAI,KAAI,gBAAgB,CAC/C,UAAW,CAAC,KAAK,gBAAgB,oBACjC,QAAS,CAAC,8BAA+B,+BAG3C,QAAQ,KAAK,YAAY,GAAI,KAAI,gBAAgB,CAC/C,UAAW,CAAC,KAAK,gBAAgB,iBAAiB,qBAClD,QAAS,CAAC,qCAIZ,SAAW,OAAO,MAAK,gBAAgB,mBAAqB,GAC1D,QAAQ,OAAO,UAAU,KAI3B,eAAQ,OAAO,UAAU,QAAQ,MAE1B,CACL,cAAe,CACb,gBAAiB,KAAK,gBAAgB,YAAY,gBAClD,oBAAqB,KAAK,gBAAgB,uBA/ClD,QAAA,6BAAA",
  "names": []
}
