{
  "version": 3,
  "sources": ["connection.ts"],
  "sourcesContent": ["import { IResource, Resource, Stack, SecretValue } from '../../core';\nimport { Construct } from 'constructs';\nimport { CfnConnection } from './events.generated';\n\n/**\n * An API Destination Connection\n *\n * A connection defines the authorization type and credentials to use for authorization with an API destination HTTP endpoint.\n */\nexport interface ConnectionProps {\n  /**\n   * The name of the connection.\n   *\n   * @default - A name is automatically generated\n   */\n  readonly connectionName?: string;\n\n  /**\n   * The name of the connection.\n   *\n   * @default - none\n   */\n  readonly description?: string;\n\n  /**\n   * The authorization type for the connection.\n   */\n  readonly authorization: Authorization;\n\n  /**\n   * Additional string parameters to add to the invocation bodies\n   *\n   * @default - No additional parameters\n   */\n  readonly bodyParameters?: Record<string, HttpParameter>;\n\n  /**\n   * Additional string parameters to add to the invocation headers\n   *\n   * @default - No additional parameters\n   */\n  readonly headerParameters?: Record<string, HttpParameter>;\n\n  /**\n   * Additional string parameters to add to the invocation query strings\n   *\n   * @default - No additional parameters\n   */\n  readonly queryStringParameters?: Record<string, HttpParameter>;\n}\n\n/**\n * Authorization type for an API Destination Connection\n */\nexport abstract class Authorization {\n  /**\n   * Use API key authorization\n   *\n   * API key authorization has two components: an API key name and an API key value.\n   * What these are depends on the target of your connection.\n   */\n  public static apiKey(apiKeyName: string, apiKeyValue: SecretValue): Authorization {\n    return new class extends Authorization {\n      public _bind() {\n        return {\n          authorizationType: AuthorizationType.API_KEY,\n          authParameters: {\n            apiKeyAuthParameters: {\n              apiKeyName: apiKeyName,\n              apiKeyValue: apiKeyValue.toString(),\n            },\n          } as CfnConnection.AuthParametersProperty,\n        };\n      }\n    }();\n  }\n\n  /**\n   * Use username and password authorization\n   */\n  public static basic(username: string, password: SecretValue): Authorization {\n    return new class extends Authorization {\n      public _bind() {\n        return {\n          authorizationType: AuthorizationType.BASIC,\n          authParameters: {\n            basicAuthParameters: {\n              username: username,\n              password: password.toString(),\n            },\n          } as CfnConnection.AuthParametersProperty,\n        };\n      }\n    }();\n  }\n\n  /**\n   * Use OAuth authorization\n   */\n  public static oauth(props: OAuthAuthorizationProps): Authorization {\n    if (![HttpMethod.POST, HttpMethod.GET, HttpMethod.PUT].includes(props.httpMethod)) {\n      throw new Error('httpMethod must be one of GET, POST, PUT');\n    }\n\n    return new class extends Authorization {\n      public _bind() {\n        return {\n          authorizationType: AuthorizationType.OAUTH_CLIENT_CREDENTIALS,\n          authParameters: {\n            oAuthParameters: {\n              authorizationEndpoint: props.authorizationEndpoint,\n              clientParameters: {\n                clientId: props.clientId,\n                clientSecret: props.clientSecret.toString(),\n              },\n              httpMethod: props.httpMethod,\n              oAuthHttpParameters: {\n                bodyParameters: renderHttpParameters(props.bodyParameters),\n                headerParameters: renderHttpParameters(props.headerParameters),\n                queryStringParameters: renderHttpParameters(props.queryStringParameters),\n              },\n            },\n          } as CfnConnection.AuthParametersProperty,\n        };\n      }\n    }();\n\n  }\n\n  /**\n   * Bind the authorization to the construct and return the authorization properties\n   *\n   * @internal\n   */\n  public abstract _bind(): AuthorizationBindResult;\n}\n\n/**\n * Properties for `Authorization.oauth()`\n */\nexport interface OAuthAuthorizationProps {\n\n  /**\n   * The URL to the authorization endpoint\n   */\n  readonly authorizationEndpoint: string;\n\n  /**\n   * The method to use for the authorization request.\n   *\n   * (Can only choose POST, GET or PUT).\n   */\n  readonly httpMethod: HttpMethod;\n\n  /**\n   * The client ID to use for OAuth authorization for the connection.\n   */\n  readonly clientId: string;\n\n  /**\n   * The client secret associated with the client ID to use for OAuth authorization for the connection.\n   */\n  readonly clientSecret: SecretValue;\n\n  /**\n   * Additional string parameters to add to the OAuth request body\n   *\n   * @default - No additional parameters\n   */\n  readonly bodyParameters?: Record<string, HttpParameter>;\n\n  /**\n   * Additional string parameters to add to the OAuth request header\n   *\n   * @default - No additional parameters\n   */\n  readonly headerParameters?: Record<string, HttpParameter>;\n\n  /**\n   * Additional string parameters to add to the OAuth request query string\n   *\n   * @default - No additional parameters\n   */\n  readonly queryStringParameters?: Record<string, HttpParameter>;\n}\n\n/**\n * An additional HTTP parameter to send along with the OAuth request\n */\nexport abstract class HttpParameter {\n  /**\n   * Make an OAuthParameter from a string value\n   *\n   * The value is not treated as a secret.\n   */\n  public static fromString(value: string): HttpParameter {\n    return new class extends HttpParameter {\n      public _render(name: string) {\n        return {\n          key: name,\n          value,\n        } as CfnConnection.ParameterProperty;\n      }\n    }();\n  }\n\n  /**\n   * Make an OAuthParameter from a secret\n   */\n  public static fromSecret(value: SecretValue): HttpParameter {\n    return new class extends HttpParameter {\n      public _render(name: string) {\n        return {\n          key: name,\n          value: value.toString(),\n          isValueSecret: true,\n        } as CfnConnection.ParameterProperty;\n      }\n    }();\n  }\n\n  /**\n   * Render the paramter value\n   *\n   * @internal\n   */\n  public abstract _render(name: string): any;\n}\n\n/**\n * Result of the 'bind' operation of the 'Authorization' class\n *\n * @internal\n */\nexport interface AuthorizationBindResult {\n  /**\n   * The authorization type\n   */\n  readonly authorizationType: AuthorizationType;\n\n  /**\n   * The authorization parameters (depends on the type)\n   */\n  readonly authParameters: any;\n}\n\n/**\n * Interface for EventBus Connections\n */\nexport interface IConnection extends IResource {\n  /**\n   * The Name for the connection.\n   * @attribute\n   */\n  readonly connectionName: string;\n\n  /**\n   * The ARN of the connection created.\n   * @attribute\n   */\n  readonly connectionArn: string;\n\n  /**\n   * The ARN for the secret created for the connection.\n   * @attribute\n   */\n  readonly connectionSecretArn: string;\n}\n\n/**\n * Interface with properties necessary to import a reusable Connection\n */\nexport interface ConnectionAttributes {\n  /**\n   * The Name for the connection.\n   */\n  readonly connectionName: string;\n\n  /**\n   * The ARN of the connection created.\n   */\n  readonly connectionArn: string;\n\n  /**\n   * The ARN for the secret created for the connection.\n   */\n  readonly connectionSecretArn: string;\n}\n\n/**\n * Define an EventBridge Connection\n *\n * @resource AWS::Events::Connection\n */\nexport class Connection extends Resource implements IConnection {\n  /**\n   * Import an existing connection resource\n   * @param scope Parent construct\n   * @param id Construct ID\n   * @param connectionArn ARN of imported connection\n   */\n  public static fromEventBusArn(scope: Construct, id: string, connectionArn: string, connectionSecretArn: string): IConnection {\n    const parts = Stack.of(scope).parseArn(connectionArn);\n\n    return new ImportedConnection(scope, id, {\n      connectionArn: connectionArn,\n      connectionName: parts.resourceName || '',\n      connectionSecretArn: connectionSecretArn,\n    });\n  }\n\n  /**\n   * Import an existing connection resource\n   * @param scope Parent construct\n   * @param id Construct ID\n   * @param attrs Imported connection properties\n   */\n  public static fromConnectionAttributes(scope: Construct, id: string, attrs: ConnectionAttributes): IConnection {\n    return new ImportedConnection(scope, id, attrs);\n  }\n\n  /**\n   * The Name for the connection.\n   * @attribute\n   */\n  public readonly connectionName: string;\n\n  /**\n   * The ARN of the connection created.\n   * @attribute\n   */\n  public readonly connectionArn: string;\n\n  /**\n   * The ARN for the secret created for the connection.\n   * @attribute\n   */\n  public readonly connectionSecretArn: string;\n\n  constructor(scope: Construct, id: string, props: ConnectionProps) {\n    super(scope, id, {\n      physicalName: props.connectionName,\n    });\n\n    const authBind = props.authorization._bind();\n\n    const invocationHttpParameters = !!props.headerParameters || !!props.queryStringParameters || !!props.bodyParameters ? {\n      bodyParameters: renderHttpParameters(props.bodyParameters),\n      headerParameters: renderHttpParameters(props.headerParameters),\n      queryStringParameters: renderHttpParameters(props.queryStringParameters),\n    } : undefined;\n\n    let connection = new CfnConnection(this, 'Connection', {\n      authorizationType: authBind.authorizationType,\n      authParameters: {\n        ...authBind.authParameters,\n        invocationHttpParameters: invocationHttpParameters,\n      },\n      description: props.description,\n      name: this.physicalName,\n    });\n\n    this.connectionName = this.getResourceNameAttribute(connection.ref);\n    this.connectionArn = connection.attrArn;\n    this.connectionSecretArn = connection.attrSecretArn;\n  }\n}\n\nclass ImportedConnection extends Resource {\n  public readonly connectionArn: string;\n  public readonly connectionName: string;\n  public readonly connectionSecretArn: string;\n  constructor(scope: Construct, id: string, attrs: ConnectionAttributes) {\n    const arnParts = Stack.of(scope).parseArn(attrs.connectionArn);\n    super(scope, id, {\n      account: arnParts.account,\n      region: arnParts.region,\n    });\n\n    this.connectionArn = attrs.connectionArn;\n    this.connectionName = attrs.connectionName;\n    this.connectionSecretArn = attrs.connectionSecretArn;\n  }\n}\n\n/**\n * Supported HTTP operations.\n */\nexport enum HttpMethod {\n  /** POST */\n  POST = 'POST',\n  /** GET */\n  GET = 'GET',\n  /** HEAD */\n  HEAD = 'HEAD',\n  /** OPTIONS */\n  OPTIONS = 'OPTIONS',\n  /** PUT */\n  PUT = 'PUT',\n  /** PATCH */\n  PATCH = 'PATCH',\n  /** DELETE */\n  DELETE = 'DELETE',\n}\n\n/**\n * Supported Authorization Types.\n */\nenum AuthorizationType {\n  /** API_KEY */\n  API_KEY = 'API_KEY',\n  /** BASIC */\n  BASIC = 'BASIC',\n  /** OAUTH_CLIENT_CREDENTIALS */\n  OAUTH_CLIENT_CREDENTIALS = 'OAUTH_CLIENT_CREDENTIALS',\n}\n\nfunction renderHttpParameters(ps?: Record<string, HttpParameter>): CfnConnection.ParameterProperty[] | undefined {\n  if (!ps || Object.keys(ps).length === 0) { return undefined; }\n\n  return Object.entries(ps).map(([name, p]) => p._render(name));\n}"],
  "mappings": "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",
  "names": []
}
