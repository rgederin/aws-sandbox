{
  "version": 3,
  "sources": ["schedule.ts"],
  "sourcesContent": ["import { Duration } from '../../core';\n\n/**\n * Schedule for scheduled event rules\n */\nexport abstract class Schedule {\n  /**\n   * Construct a schedule from a literal schedule expression\n   *\n   * @param expression The expression to use. Must be in a format that EventBridge will recognize\n   */\n  public static expression(expression: string): Schedule {\n    return new LiteralSchedule(expression);\n  }\n\n  /**\n   * Construct a schedule from an interval and a time unit\n   */\n  public static rate(duration: Duration): Schedule {\n    if (duration.isUnresolved()) {\n      const validDurationUnit = ['minute', 'minutes', 'hour', 'hours', 'day', 'days'];\n      if (validDurationUnit.indexOf(duration.unitLabel()) === -1) {\n        throw new Error(\"Allowed units for scheduling are: 'minute', 'minutes', 'hour', 'hours', 'day', 'days'\");\n      }\n      return new LiteralSchedule(`rate(${duration.formatTokenToNumber()})`);\n    }\n    if (duration.toSeconds() === 0) {\n      throw new Error('Duration cannot be 0');\n    }\n\n    let rate = maybeRate(duration.toDays({ integral: false }), 'day');\n    if (rate === undefined) { rate = maybeRate(duration.toHours({ integral: false }), 'hour'); }\n    if (rate === undefined) { rate = makeRate(duration.toMinutes({ integral: true }), 'minute'); }\n    return new LiteralSchedule(rate);\n  }\n\n  /**\n   * Create a schedule from a set of cron fields\n   */\n  public static cron(options: CronOptions): Schedule {\n    if (options.weekDay !== undefined && options.day !== undefined) {\n      throw new Error('Cannot supply both \\'day\\' and \\'weekDay\\', use at most one');\n    }\n\n    const minute = fallback(options.minute, '*');\n    const hour = fallback(options.hour, '*');\n    const month = fallback(options.month, '*');\n    const year = fallback(options.year, '*');\n\n    // Weekday defaults to '?' if not supplied. If it is supplied, day must become '?'\n    const day = fallback(options.day, options.weekDay !== undefined ? '?' : '*');\n    const weekDay = fallback(options.weekDay, '?');\n\n    return new LiteralSchedule(`cron(${minute} ${hour} ${day} ${month} ${weekDay} ${year})`);\n  }\n\n  /**\n   * Retrieve the expression for this schedule\n   */\n  public abstract readonly expressionString: string;\n\n  protected constructor() {\n  }\n}\n\n/**\n * Options to configure a cron expression\n *\n * All fields are strings so you can use complex expressions. Absence of\n * a field implies '*' or '?', whichever one is appropriate.\n *\n * @see https://docs.aws.amazon.com/eventbridge/latest/userguide/scheduled-events.html#cron-expressions\n */\nexport interface CronOptions {\n  /**\n   * The minute to run this rule at\n   *\n   * @default - Every minute\n   */\n  readonly minute?: string;\n\n  /**\n   * The hour to run this rule at\n   *\n   * @default - Every hour\n   */\n  readonly hour?: string;\n\n  /**\n   * The day of the month to run this rule at\n   *\n   * @default - Every day of the month\n   */\n  readonly day?: string;\n\n  /**\n   * The month to run this rule at\n   *\n   * @default - Every month\n   */\n  readonly month?: string;\n\n  /**\n   * The year to run this rule at\n   *\n   * @default - Every year\n   */\n  readonly year?: string;\n\n  /**\n   * The day of the week to run this rule at\n   *\n   * @default - Any day of the week\n   */\n  readonly weekDay?: string;\n}\n\nclass LiteralSchedule extends Schedule {\n  constructor(public readonly expressionString: string) {\n    super();\n  }\n}\n\nfunction fallback<T>(x: T | undefined, def: T): T {\n  return x ?? def;\n}\n\n/**\n * Return the rate if the rate is whole number\n */\nfunction maybeRate(interval: number, singular: string) {\n  if (interval === 0 || !Number.isInteger(interval)) { return undefined; }\n  return makeRate(interval, singular);\n}\n\n/**\n * Return 'rate(${interval} ${singular}(s))` for the interval\n */\nfunction makeRate(interval: number, singular: string) {\n  return interval === 1 ? `rate(1 ${singular})` : `rate(${interval} ${singular}s)`;\n}\n"],
  "mappings": "+MAKA,cAA8B,CAwD5B,aAAA,QAlDc,YAAW,WAAkB,CACzC,MAAO,IAAI,iBAAgB,kBAMf,MAAK,SAAkB,CACnC,0DAAI,SAAS,eAAgB,CAE3B,GAAI,AADsB,CAAC,SAAU,UAAW,OAAQ,QAAS,MAAO,QAClD,QAAQ,SAAS,eAAiB,GACtD,KAAM,IAAI,OAAM,yFAElB,MAAO,IAAI,iBAAgB,QAAQ,SAAS,0BAE9C,GAAI,SAAS,cAAgB,EAC3B,KAAM,IAAI,OAAM,wBAGlB,GAAI,MAAO,UAAU,SAAS,OAAO,CAAE,SAAU,KAAU,OAC3D,MAAI,QAAS,QAAa,MAAO,UAAU,SAAS,QAAQ,CAAE,SAAU,KAAU,SAC9E,OAAS,QAAa,MAAO,SAAS,SAAS,UAAU,CAAE,SAAU,KAAS,WAC3E,GAAI,iBAAgB,YAMf,MAAK,QAAoB,CACrC,uEAAI,QAAQ,UAAY,QAAa,QAAQ,MAAQ,OACnD,KAAM,IAAI,OAAM,2DAGlB,KAAM,QAAS,SAAS,QAAQ,OAAQ,KAClC,KAAO,SAAS,QAAQ,KAAM,KAC9B,MAAQ,SAAS,QAAQ,MAAO,KAChC,KAAO,SAAS,QAAQ,KAAM,KAG9B,IAAM,SAAS,QAAQ,IAAK,QAAQ,UAAY,OAAY,IAAM,KAClE,QAAU,SAAS,QAAQ,QAAS,KAE1C,MAAO,IAAI,iBAAgB,QAAQ,UAAU,QAAQ,OAAO,SAAS,WAAW,UAhDpF,QAAA,SAAA,qGAgHA,6BAA8B,SAAQ,CACpC,YAA4B,iBAAwB,CAClD,QAD0B,KAAA,iBAAA,kBAK9B,kBAAqB,EAAkB,IAAM,CAC3C,MAAO,IAAC,KAAD,EAAK,IAMd,mBAAmB,SAAkB,SAAgB,CACnD,GAAI,aAAa,GAAK,CAAC,OAAO,UAAU,WACxC,MAAO,UAAS,SAAU,UAM5B,kBAAkB,SAAkB,SAAgB,CAClD,MAAO,YAAa,EAAI,UAAU,YAAc,QAAQ,YAAY",
  "names": []
}
