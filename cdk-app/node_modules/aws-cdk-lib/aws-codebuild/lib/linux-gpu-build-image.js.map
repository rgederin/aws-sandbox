{
  "version": 3,
  "sources": ["linux-gpu-build-image.ts"],
  "sourcesContent": ["import * as ecr from '../../aws-ecr';\nimport * as core from '../../core';\nimport { FactName } from '../../region-info';\nimport { BuildSpec } from './build-spec';\nimport { runScriptLinuxBuildSpec } from './private/run-script-linux-build-spec';\nimport {\n  BuildEnvironment, BuildImageBindOptions, BuildImageConfig, ComputeType, IBindableBuildImage, IBuildImage,\n  ImagePullPrincipalType, IProject,\n} from './project';\n\n// keep this import separate from other imports to reduce chance for merge conflicts with v2-main\n// eslint-disable-next-line no-duplicate-imports, import/order\nimport { Construct } from 'constructs';\n\n/**\n * A CodeBuild GPU image running Linux.\n *\n * This class has public constants that represent the most popular GPU images from AWS Deep Learning Containers.\n *\n * @see https://aws.amazon.com/releasenotes/available-deep-learning-containers-images\n */\nexport class LinuxGpuBuildImage implements IBindableBuildImage {\n  /** Tensorflow 1.14.0 GPU image from AWS Deep Learning Containers. */\n  public static readonly DLC_TENSORFLOW_1_14_0 = LinuxGpuBuildImage.awsDeepLearningContainersImage('tensorflow-training',\n    '1.14.0-gpu-py36-cu100-ubuntu16.04');\n  /** Tensorflow 1.15.0 GPU image from AWS Deep Learning Containers. */\n  public static readonly DLC_TENSORFLOW_1_15_0 = LinuxGpuBuildImage.awsDeepLearningContainersImage('tensorflow-training',\n    '1.15.0-gpu-py36-cu100-ubuntu18.04');\n  /** Tensorflow 1.15.2 GPU training image from AWS Deep Learning Containers. */\n  public static readonly DLC_TENSORFLOW_1_15_2_TRAINING = LinuxGpuBuildImage.awsDeepLearningContainersImage('tensorflow-training',\n    '1.15.2-gpu-py37-cu100-ubuntu18.04');\n  /** Tensorflow 1.15.2 GPU inference image from AWS Deep Learning Containers. */\n  public static readonly DLC_TENSORFLOW_1_15_2_INFERENCE = LinuxGpuBuildImage.awsDeepLearningContainersImage('tensorflow-inference',\n    '1.15.2-gpu-py36-cu100-ubuntu18.04');\n  /** Tensorflow 2.0.0 GPU image from AWS Deep Learning Containers. */\n  public static readonly DLC_TENSORFLOW_2_0_0 = LinuxGpuBuildImage.awsDeepLearningContainersImage('tensorflow-training',\n    '2.0.0-gpu-py36-cu100-ubuntu18.04');\n  /** Tensorflow 2.0.1 GPU image from AWS Deep Learning Containers. */\n  public static readonly DLC_TENSORFLOW_2_0_1 = LinuxGpuBuildImage.awsDeepLearningContainersImage('tensorflow-training',\n    '2.0.1-gpu-py36-cu100-ubuntu18.04');\n  /** Tensorflow 2.1.0 GPU training image from AWS Deep Learning Containers. */\n  public static readonly DLC_TENSORFLOW_2_1_0_TRAINING = LinuxGpuBuildImage.awsDeepLearningContainersImage('tensorflow-training',\n    '2.1.0-gpu-py36-cu101-ubuntu18.04');\n  /** Tensorflow 2.1.0 GPU inference image from AWS Deep Learning Containers. */\n  public static readonly DLC_TENSORFLOW_2_1_0_INFERENCE = LinuxGpuBuildImage.awsDeepLearningContainersImage('tensorflow-inference',\n    '2.1.0-gpu-py36-cu101-ubuntu18.04');\n  /** Tensorflow 2.2.0 GPU training image from AWS Deep Learning Containers. */\n  public static readonly DLC_TENSORFLOW_2_2_0_TRAINING = LinuxGpuBuildImage.awsDeepLearningContainersImage('tensorflow-training',\n    '2.2.0-gpu-py37-cu101-ubuntu18.04');\n\n  /** PyTorch 1.2.0 GPU image from AWS Deep Learning Containers. */\n  public static readonly DLC_PYTORCH_1_2_0 = LinuxGpuBuildImage.awsDeepLearningContainersImage('pytorch-training',\n    '1.2.0-gpu-py36-cu100-ubuntu16.04');\n  /** PyTorch 1.3.1 GPU image from AWS Deep Learning Containers. */\n  public static readonly DLC_PYTORCH_1_3_1 = LinuxGpuBuildImage.awsDeepLearningContainersImage('pytorch-training',\n    '1.3.1-gpu-py36-cu101-ubuntu16.04');\n  /** PyTorch 1.4.0 GPU training image from AWS Deep Learning Containers. */\n  public static readonly DLC_PYTORCH_1_4_0_TRAINING = LinuxGpuBuildImage.awsDeepLearningContainersImage('pytorch-training',\n    '1.4.0-gpu-py36-cu101-ubuntu16.04');\n  /** PyTorch 1.4.0 GPU inference image from AWS Deep Learning Containers. */\n  public static readonly DLC_PYTORCH_1_4_0_INFERENCE = LinuxGpuBuildImage.awsDeepLearningContainersImage('pytorch-inference',\n    '1.4.0-gpu-py36-cu101-ubuntu16.04');\n  /** PyTorch 1.5.0 GPU training image from AWS Deep Learning Containers. */\n  public static readonly DLC_PYTORCH_1_5_0_TRAINING = LinuxGpuBuildImage.awsDeepLearningContainersImage('pytorch-training',\n    '1.5.0-gpu-py36-cu101-ubuntu16.04');\n  /** PyTorch 1.5.0 GPU inference image from AWS Deep Learning Containers. */\n  public static readonly DLC_PYTORCH_1_5_0_INFERENCE = LinuxGpuBuildImage.awsDeepLearningContainersImage('pytorch-inference',\n    '1.5.0-gpu-py36-cu101-ubuntu16.04');\n\n  /** MXNet 1.4.1 GPU image from AWS Deep Learning Containers. */\n  public static readonly DLC_MXNET_1_4_1 = LinuxGpuBuildImage.awsDeepLearningContainersImage('mxnet-training',\n    '1.4.1-gpu-py36-cu100-ubuntu16.04');\n  /** MXNet 1.6.0 GPU image from AWS Deep Learning Containers. */\n  public static readonly DLC_MXNET_1_6_0 = LinuxGpuBuildImage.awsDeepLearningContainersImage('mxnet-training',\n    '1.6.0-gpu-py36-cu101-ubuntu16.04');\n\n  /**\n   * Returns a Linux GPU build image from AWS Deep Learning Containers.\n   *\n   * @param repositoryName the name of the repository,\n   *   for example \"pytorch-inference\"\n   * @param tag the tag of the image, for example \"1.5.0-gpu-py36-cu101-ubuntu16.04\"\n   * @param account the AWS account ID where the DLC repository for this region is hosted in.\n   *   In many cases, the CDK can infer that for you, but for some newer region our information\n   *   might be out of date; in that case, you can specify the region explicitly using this optional parameter\n   * @see https://aws.amazon.com/releasenotes/available-deep-learning-containers-images\n   */\n  public static awsDeepLearningContainersImage(repositoryName: string, tag: string, account?: string): IBuildImage {\n    return new LinuxGpuBuildImage(repositoryName, tag, account);\n  }\n\n\n  /**\n   * Returns a GPU image running Linux from an ECR repository.\n   *\n   * NOTE: if the repository is external (i.e. imported), then we won't be able to add\n   * a resource policy statement for it so CodeBuild can pull the image.\n   *\n   * @see https://docs.aws.amazon.com/codebuild/latest/userguide/sample-ecr.html\n   *\n   * @param repository The ECR repository\n   * @param tag Image tag (default \"latest\")\n   */\n  public static fromEcrRepository(repository: ecr.IRepository, tag: string = 'latest'): IBuildImage {\n    return new LinuxGpuBuildImage(repository.repositoryName, tag, repository.env.account);\n  }\n\n  public readonly type = 'LINUX_GPU_CONTAINER';\n  public readonly defaultComputeType = ComputeType.LARGE;\n  public readonly imagePullPrincipalType?: ImagePullPrincipalType = ImagePullPrincipalType.SERVICE_ROLE;\n  public readonly imageId: string;\n\n  private _imageAccount?: string;\n\n  private constructor(private readonly repositoryName: string, tag: string, private readonly account: string | undefined) {\n    const imageAccount = account ?? core.Lazy.string({\n      produce: () => {\n        if (this._imageAccount === undefined) {\n          throw new Error('Make sure this \\'LinuxGpuBuildImage\\' is used in a CodeBuild Project construct');\n        }\n        return this._imageAccount;\n      },\n    });\n\n    // The value of imageId below *should* have been `Lazy.stringValue(() => repository.repositoryUriForTag(this.tag))`,\n    // but we can't change that anymore because someone somewhere might at this point have written code\n    // to do `image.imageId.includes('pytorch')` and changing this to a full-on token would break them.\n    this.imageId = `${imageAccount}.dkr.ecr.${core.Aws.REGION}.${core.Aws.URL_SUFFIX}/${repositoryName}:${tag}`;\n  }\n\n  public bind(scope: Construct, project: IProject, _options: BuildImageBindOptions): BuildImageConfig {\n    const account = this.account ?? core.Stack.of(scope).regionalFact(FactName.DLC_REPOSITORY_ACCOUNT);\n    const repository = ecr.Repository.fromRepositoryAttributes(scope, 'AwsDlcRepositoryCodeBuild', {\n      repositoryName: this.repositoryName,\n      repositoryArn: ecr.Repository.arnForLocalRepository(this.repositoryName, scope, account),\n    });\n\n    repository.grantPull(project);\n\n    this._imageAccount = account;\n\n    return {\n    };\n  }\n\n  public validate(buildEnvironment: BuildEnvironment): string[] {\n    const ret = [];\n    if (buildEnvironment.computeType &&\n        buildEnvironment.computeType !== ComputeType.LARGE) {\n      ret.push(`GPU images only support ComputeType '${ComputeType.LARGE}' - ` +\n        `'${buildEnvironment.computeType}' was given`);\n    }\n    return ret;\n  }\n\n  public runScriptBuildspec(entrypoint: string): BuildSpec {\n    return runScriptLinuxBuildSpec(entrypoint);\n  }\n}\n"],
  "mappings": "yNAAA,IAAA,QAAA,iBACA,KAAA,QAAA,cACA,cAAA,QAAA,qBAEA,8BAAA,QAAA,yCACA,UAAA,QAAA,aAgBA,wBAA+B,CA6F7B,YAAqC,eAAwB,IAA8B,QAA2B,CAAjF,KAAA,eAAA,eAAsD,KAAA,QAAA,QAP3E,KAAA,KAAO,sBACP,KAAA,mBAAqB,UAAA,YAAY,MACjC,KAAA,uBAAkD,UAAA,uBAAuB,aAMvF,KAAM,cAAe,SAAO,KAAP,QAAW,KAAK,KAAK,OAAO,CAC/C,QAAS,IAAK,CACZ,GAAI,KAAK,gBAAkB,OACzB,KAAM,IAAI,OAAM,gFAElB,MAAO,MAAK,iBAOhB,KAAK,QAAU,GAAG,wBAAwB,KAAK,IAAI,UAAU,KAAK,IAAI,cAAc,kBAAkB,YAxC1F,gCAA+B,eAAwB,IAAa,QAAgB,CAChG,MAAO,IAAI,oBAAmB,eAAgB,IAAK,eAevC,mBAAkB,WAA6B,IAAc,SAAQ,4EAC1E,GAAI,oBAAmB,WAAW,eAAgB,IAAK,WAAW,IAAI,SA0BxE,KAAK,MAAkB,QAAmB,SAA+B,8JAC9E,KAAM,SAAO,IAAG,KAAK,WAAO,MAAA,KAAA,OAAA,GAAI,KAAK,MAAM,GAAG,OAAO,aAAa,cAAA,SAAS,wBAM3E,MALmB,KAAI,WAAW,yBAAyB,MAAO,4BAA6B,CAC7F,eAAgB,KAAK,eACrB,cAAe,IAAI,WAAW,sBAAsB,KAAK,eAAgB,MAAO,WAGvE,UAAU,SAErB,KAAK,cAAgB,QAEd,GAIF,SAAS,iBAAkC,sFAChD,KAAM,KAAM,GACZ,MAAI,kBAAiB,aACjB,iBAAiB,cAAgB,UAAA,YAAY,OAC/C,IAAI,KAAK,wCAAwC,UAAA,YAAY,aACvD,iBAAiB,0BAElB,IAGF,mBAAmB,WAAkB,CAC1C,MAAO,+BAAA,wBAAwB,aAvInC,QAAA,mBAAA,sIAEyB,mBAAA,sBAAwB,mBAAmB,+BAA+B,sBAC/F,qCAEqB,mBAAA,sBAAwB,mBAAmB,+BAA+B,sBAC/F,qCAEqB,mBAAA,+BAAiC,mBAAmB,+BAA+B,sBACxG,qCAEqB,mBAAA,gCAAkC,mBAAmB,+BAA+B,uBACzG,qCAEqB,mBAAA,qBAAuB,mBAAmB,+BAA+B,sBAC9F,oCAEqB,mBAAA,qBAAuB,mBAAmB,+BAA+B,sBAC9F,oCAEqB,mBAAA,8BAAgC,mBAAmB,+BAA+B,sBACvG,oCAEqB,mBAAA,+BAAiC,mBAAmB,+BAA+B,uBACxG,oCAEqB,mBAAA,8BAAgC,mBAAmB,+BAA+B,sBACvG,oCAGqB,mBAAA,kBAAoB,mBAAmB,+BAA+B,mBAC3F,oCAEqB,mBAAA,kBAAoB,mBAAmB,+BAA+B,mBAC3F,oCAEqB,mBAAA,2BAA6B,mBAAmB,+BAA+B,mBACpG,oCAEqB,mBAAA,4BAA8B,mBAAmB,+BAA+B,oBACrG,oCAEqB,mBAAA,2BAA6B,mBAAmB,+BAA+B,mBACpG,oCAEqB,mBAAA,4BAA8B,mBAAmB,+BAA+B,oBACrG,oCAGqB,mBAAA,gBAAkB,mBAAmB,+BAA+B,iBACzF,oCAEqB,mBAAA,gBAAkB,mBAAmB,+BAA+B,iBACzF",
  "names": []
}
