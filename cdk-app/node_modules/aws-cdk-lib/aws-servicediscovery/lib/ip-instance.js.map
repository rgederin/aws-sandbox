{
  "version": 3,
  "sources": ["ip-instance.ts"],
  "sourcesContent": ["import { Construct } from 'constructs';\nimport { BaseInstanceProps, InstanceBase } from './instance';\nimport { DnsRecordType, IService } from './service';\nimport { CfnInstance } from './servicediscovery.generated';\n\n/*\n * Properties for a IpInstance used for service#registerIpInstance\n */\nexport interface IpInstanceBaseProps extends BaseInstanceProps {\n  /**\n   * The port on the endpoint that you want AWS Cloud Map to perform health checks on. This value is also used for\n   * the port value in an SRV record if the service that you specify includes an SRV record. You can also specify a\n   * default port that is applied to all instances in the Service configuration.\n   *\n   * @default 80\n   */\n  readonly port?: number;\n\n  /**\n   *  If the service that you specify contains a template for an A record, the IPv4 address that you want AWS Cloud\n   *  Map to use for the value of the A record.\n   *\n   * @default none\n   */\n  readonly ipv4?: string;\n\n  /**\n   *  If the service that you specify contains a template for an AAAA record, the IPv6 address that you want AWS Cloud\n   *  Map to use for the value of the AAAA record.\n   *\n   * @default none\n   */\n  readonly ipv6?: string;\n}\n\n/*\n * Properties for an IpInstance\n */\nexport interface IpInstanceProps extends IpInstanceBaseProps {\n  /**\n   * The Cloudmap service this resource is registered to.\n   */\n  readonly service: IService;\n}\n\n/**\n * Instance that is accessible using an IP address.\n *\n * @resource AWS::ServiceDiscovery::Instance\n */\nexport class IpInstance extends InstanceBase {\n  /**\n   * The Id of the instance\n   */\n  public readonly instanceId: string;\n\n  /**\n   * The Cloudmap service to which the instance is registered.\n   */\n  public readonly service: IService;\n\n  /**\n   * The Ipv4 address of the instance, or blank string if none available\n   */\n  public readonly ipv4: string;\n\n  /**\n   * The Ipv6 address of the instance, or blank string if none available\n   */\n  public readonly ipv6: string;\n\n  /**\n   * The exposed port of the instance\n   */\n  public readonly port: number;\n\n  constructor(scope: Construct, id: string, props: IpInstanceProps) {\n    super(scope, id);\n    const dnsRecordType = props.service.dnsRecordType;\n\n    if (dnsRecordType === DnsRecordType.CNAME) {\n      throw new Error('Service must support `A`, `AAAA` or `SRV` records to register this instance type.');\n    }\n    if (dnsRecordType === DnsRecordType.SRV) {\n      if (!props.port) {\n        throw new Error('A `port` must be specified for a service using a `SRV` record.');\n      }\n\n      if (!props.ipv4 && !props.ipv6) {\n        throw new Error('At least `ipv4` or `ipv6` must be specified for a service using a `SRV` record.');\n      }\n    }\n\n    if (!props.ipv4 && (dnsRecordType === DnsRecordType.A || dnsRecordType === DnsRecordType.A_AAAA)) {\n      throw new Error('An `ipv4` must be specified for a service using a `A` record.');\n    }\n\n    if (!props.ipv6 &&\n      (dnsRecordType === DnsRecordType.AAAA || dnsRecordType === DnsRecordType.A_AAAA)) {\n      throw new Error('An `ipv6` must be specified for a service using a `AAAA` record.');\n    }\n\n    const port = props.port || 80;\n\n    const resource = new CfnInstance(this, 'Resource', {\n      instanceAttributes: {\n        AWS_INSTANCE_IPV4: props.ipv4,\n        AWS_INSTANCE_IPV6: props.ipv6,\n        AWS_INSTANCE_PORT: port.toString(),\n        ...props.customAttributes,\n      },\n      instanceId: props.instanceId || this.uniqueInstanceId(),\n      serviceId: props.service.serviceId,\n    });\n\n    this.service = props.service;\n    this.instanceId = resource.ref;\n    this.ipv4 = props.ipv4 || '';\n    this.ipv6 = props.ipv6 || '';\n    this.port = port;\n  }\n}\n"],
  "mappings": "iNACA,WAAA,QAAA,cACA,UAAA,QAAA,aACA,6BAAA,QAAA,gCA+CA,wBAAgC,YAAA,YAAY,CA0B1C,YAAY,MAAkB,GAAY,MAAsB,CAC9D,MAAM,MAAO,oFACb,KAAM,eAAgB,MAAM,QAAQ,cAEpC,GAAI,gBAAkB,UAAA,cAAc,MAClC,KAAM,IAAI,OAAM,qFAElB,GAAI,gBAAkB,UAAA,cAAc,IAAK,CACvC,GAAI,CAAC,MAAM,KACT,KAAM,IAAI,OAAM,kEAGlB,GAAI,CAAC,MAAM,MAAQ,CAAC,MAAM,KACxB,KAAM,IAAI,OAAM,mFAIpB,GAAI,CAAC,MAAM,MAAS,iBAAkB,UAAA,cAAc,GAAK,gBAAkB,UAAA,cAAc,QACvF,KAAM,IAAI,OAAM,iEAGlB,GAAI,CAAC,MAAM,MACR,iBAAkB,UAAA,cAAc,MAAQ,gBAAkB,UAAA,cAAc,QACzE,KAAM,IAAI,OAAM,oEAGlB,KAAM,MAAO,MAAM,MAAQ,GAErB,SAAW,GAAI,8BAAA,YAAY,KAAM,WAAY,CACjD,mBAAoB,CAClB,kBAAmB,MAAM,KACzB,kBAAmB,MAAM,KACzB,kBAAmB,KAAK,cACrB,MAAM,kBAEX,WAAY,MAAM,YAAc,KAAK,mBACrC,UAAW,MAAM,QAAQ,YAG3B,KAAK,QAAU,MAAM,QACrB,KAAK,WAAa,SAAS,IAC3B,KAAK,KAAO,MAAM,MAAQ,GAC1B,KAAK,KAAO,MAAM,MAAQ,GAC1B,KAAK,KAAO,MArEhB,QAAA,WAAA",
  "names": []
}
