{
  "version": 3,
  "sources": ["util.ts"],
  "sourcesContent": ["import { Duration } from '../../../core';\n\nconst DEFAULT_TIMEOUT = Duration.minutes(30);\nconst DEFAULT_INTERVAL = Duration.seconds(5);\n\nexport function calculateRetryPolicy(props: { totalTimeout?: Duration, queryInterval?: Duration } = { }) {\n  const totalTimeout = props.totalTimeout || DEFAULT_TIMEOUT;\n  const interval = props.queryInterval || DEFAULT_INTERVAL;\n  const maxAttempts = totalTimeout.toSeconds() / interval.toSeconds();\n\n  if (Math.round(maxAttempts) !== maxAttempts) {\n    throw new Error(`Cannot determine retry count since totalTimeout=${totalTimeout.toSeconds()}s is not integrally dividable by queryInterval=${interval.toSeconds()}s`);\n  }\n\n  return {\n    maxAttempts,\n    interval,\n    backoffRate: 1,\n  };\n}\n"],
  "mappings": "wGAAA,KAAA,QAAA,QAAA,iBAEM,gBAAkB,OAAA,SAAS,QAAQ,IACnC,iBAAmB,OAAA,SAAS,QAAQ,GAE1C,8BAAqC,MAA+D,GAAG,CACrG,KAAM,cAAe,MAAM,cAAgB,gBACrC,SAAW,MAAM,eAAiB,iBAClC,YAAc,aAAa,YAAc,SAAS,YAExD,GAAI,KAAK,MAAM,eAAiB,YAC9B,KAAM,IAAI,OAAM,mDAAmD,aAAa,6DAA6D,SAAS,gBAGxJ,MAAO,CACL,YACA,SACA,YAAa,GAZjB,QAAA,qBAAA",
  "names": []
}
