{
  "version": 3,
  "sources": ["edge-function.ts"],
  "sourcesContent": ["import * as path from 'path';\nimport * as cloudwatch from '../../../aws-cloudwatch';\nimport * as ec2 from '../../../aws-ec2';\nimport * as iam from '../../../aws-iam';\nimport * as lambda from '../../../aws-lambda';\nimport * as ssm from '../../../aws-ssm';\nimport {\n  CfnResource,\n  CustomResource, CustomResourceProvider, CustomResourceProviderRuntime,\n  Lazy, Resource, Stack, Stage, Token,\n} from '../../../core';\n\nimport { Construct, Node } from 'constructs';\n\n/**\n * Properties for creating a Lambda@Edge function\n */\nexport interface EdgeFunctionProps extends lambda.FunctionProps {\n  /**\n   * The stack ID of Lambda@Edge function.\n   *\n   * @default - `edge-lambda-stack-${region}`\n   */\n  readonly stackId?: string;\n}\n\n/**\n * A Lambda@Edge function.\n *\n * Convenience resource for requesting a Lambda function in the 'us-east-1' region for use with Lambda@Edge.\n * Implements several restrictions enforced by Lambda@Edge.\n *\n * Note that this construct requires that the 'us-east-1' region has been bootstrapped.\n * See https://docs.aws.amazon.com/cdk/latest/guide/bootstrapping.html or 'cdk bootstrap --help' for options.\n *\n * @resource AWS::Lambda::Function\n */\nexport class EdgeFunction extends Resource implements lambda.IVersion {\n\n  private static readonly EDGE_REGION: string = 'us-east-1';\n\n  public readonly edgeArn: string;\n  public readonly functionName: string;\n  public readonly functionArn: string;\n  public readonly grantPrincipal: iam.IPrincipal;\n  public readonly isBoundToVpc = false;\n  public readonly permissionsNode: Node;\n  public readonly role?: iam.IRole;\n  public readonly version: string;\n  public readonly architecture: lambda.Architecture;\n\n  private readonly _edgeFunction: lambda.Function;\n\n  constructor(scope: Construct, id: string, props: EdgeFunctionProps) {\n    super(scope, id);\n\n    // Create a simple Function if we're already in us-east-1; otherwise create a cross-region stack.\n    const regionIsUsEast1 = !Token.isUnresolved(this.stack.region) && this.stack.region === 'us-east-1';\n    const { edgeFunction, edgeArn } = regionIsUsEast1\n      ? this.createInRegionFunction(props)\n      : this.createCrossRegionFunction(id, props);\n\n    this.edgeArn = edgeArn;\n\n    this.functionArn = edgeArn;\n    this._edgeFunction = edgeFunction;\n    this.functionName = this._edgeFunction.functionName;\n    this.grantPrincipal = this._edgeFunction.role!;\n    this.permissionsNode = this._edgeFunction.permissionsNode;\n    this.version = lambda.extractQualifierFromArn(this.functionArn);\n    this.architecture = this._edgeFunction.architecture;\n\n    this.node.defaultChild = this._edgeFunction;\n  }\n\n  public get lambda(): lambda.IFunction {\n    return this._edgeFunction;\n  }\n\n  /**\n   * Convenience method to make `EdgeFunction` conform to the same interface as `Function`.\n   */\n  public get currentVersion(): lambda.IVersion {\n    return this;\n  }\n\n  public addAlias(aliasName: string, options: lambda.AliasOptions = {}): lambda.Alias {\n    return new lambda.Alias(this._edgeFunction, `Alias${aliasName}`, {\n      aliasName,\n      version: this._edgeFunction.currentVersion,\n      ...options,\n    });\n  }\n\n  /**\n   * Not supported. Connections are only applicable to VPC-enabled functions.\n   */\n  public get connections(): ec2.Connections {\n    throw new Error('Lambda@Edge does not support connections');\n  }\n  public get latestVersion(): lambda.IVersion {\n    throw new Error('$LATEST function version cannot be used for Lambda@Edge');\n  }\n\n  public addEventSourceMapping(id: string, options: lambda.EventSourceMappingOptions): lambda.EventSourceMapping {\n    return this.lambda.addEventSourceMapping(id, options);\n  }\n  public addPermission(id: string, permission: lambda.Permission): void {\n    return this.lambda.addPermission(id, permission);\n  }\n  public addToRolePolicy(statement: iam.PolicyStatement): void {\n    return this.lambda.addToRolePolicy(statement);\n  }\n  public grantInvoke(identity: iam.IGrantable): iam.Grant {\n    return this.lambda.grantInvoke(identity);\n  }\n  public metric(metricName: string, props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return this.lambda.metric(metricName, { ...props, region: EdgeFunction.EDGE_REGION });\n  }\n  public metricDuration(props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return this.lambda.metricDuration({ ...props, region: EdgeFunction.EDGE_REGION });\n  }\n  public metricErrors(props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return this.lambda.metricErrors({ ...props, region: EdgeFunction.EDGE_REGION });\n  }\n  public metricInvocations(props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return this.lambda.metricInvocations({ ...props, region: EdgeFunction.EDGE_REGION });\n  }\n  public metricThrottles(props?: cloudwatch.MetricOptions): cloudwatch.Metric {\n    return this.lambda.metricThrottles({ ...props, region: EdgeFunction.EDGE_REGION });\n  }\n  /** Adds an event source to this function. */\n  public addEventSource(source: lambda.IEventSource): void {\n    return this.lambda.addEventSource(source);\n  }\n  public configureAsyncInvoke(options: lambda.EventInvokeConfigOptions): void {\n    return this.lambda.configureAsyncInvoke(options);\n  }\n\n  /** Create a function in-region */\n  private createInRegionFunction(props: lambda.FunctionProps): FunctionConfig {\n    const edgeFunction = new lambda.Function(this, 'Fn', props);\n    addEdgeLambdaToRoleTrustStatement(edgeFunction.role!);\n\n    return { edgeFunction, edgeArn: edgeFunction.currentVersion.edgeArn };\n  }\n\n  /** Create a support stack and function in us-east-1, and a SSM reader in-region */\n  private createCrossRegionFunction(id: string, props: EdgeFunctionProps): FunctionConfig {\n    const parameterNamePrefix = 'cdk/EdgeFunctionArn';\n    if (Token.isUnresolved(this.env.region)) {\n      throw new Error('stacks which use EdgeFunctions must have an explicitly set region');\n    }\n    // SSM parameter names must only contain letters, numbers, ., _, -, or /.\n    const sanitizedPath = this.node.path.replace(/[^\\/\\w.-]/g, '_');\n    const parameterName = `/${parameterNamePrefix}/${this.env.region}/${sanitizedPath}`;\n    const functionStack = this.edgeStack(props.stackId);\n\n    const edgeFunction = new lambda.Function(functionStack, id, props);\n    addEdgeLambdaToRoleTrustStatement(edgeFunction.role!);\n\n    // Store the current version's ARN to be retrieved by the cross region reader below.\n    const version = edgeFunction.currentVersion;\n    new ssm.StringParameter(edgeFunction, 'Parameter', {\n      parameterName,\n      stringValue: version.edgeArn,\n    });\n\n    const edgeArn = this.createCrossRegionArnReader(parameterNamePrefix, parameterName, version);\n\n    return { edgeFunction, edgeArn };\n  }\n\n  private createCrossRegionArnReader(parameterNamePrefix: string, parameterName: string, version: lambda.Version): string {\n    // Prefix of the parameter ARN that applies to all EdgeFunctions.\n    // This is necessary because the `CustomResourceProvider` is a singleton, and the `policyStatement`\n    // must work for multiple EdgeFunctions.\n    const parameterArnPrefix = this.stack.formatArn({\n      service: 'ssm',\n      region: EdgeFunction.EDGE_REGION,\n      resource: 'parameter',\n      resourceName: parameterNamePrefix + '/*',\n    });\n\n    const resourceType = 'Custom::CrossRegionStringParameterReader';\n    const serviceToken = CustomResourceProvider.getOrCreate(this, resourceType, {\n      codeDirectory: path.join(__dirname, 'edge-function'),\n      runtime: CustomResourceProviderRuntime.NODEJS_12_X,\n      policyStatements: [{\n        Effect: 'Allow',\n        Resource: parameterArnPrefix,\n        Action: ['ssm:GetParameter'],\n      }],\n    });\n    const resource = new CustomResource(this, 'ArnReader', {\n      resourceType: resourceType,\n      serviceToken,\n      properties: {\n        Region: EdgeFunction.EDGE_REGION,\n        ParameterName: parameterName,\n        // This is used to determine when the function has changed, to refresh the ARN from the custom resource.\n        //\n        // Use the logical id of the function version. Whenever a function version changes, the logical id must be\n        // changed for it to take effect - a good candidate for RefreshToken.\n        RefreshToken: Lazy.uncachedString({\n          produce: () => {\n            const cfn = version.node.defaultChild as CfnResource;\n            return this.stack.resolve(cfn.logicalId);\n          },\n        }),\n      },\n    });\n\n    return resource.getAttString('FunctionArn');\n  }\n\n  private edgeStack(stackId?: string): Stack {\n    const stage = Stage.of(this);\n    if (!stage) {\n      throw new Error('stacks which use EdgeFunctions must be part of a CDK app or stage');\n    }\n\n    const edgeStackId = stackId ?? `edge-lambda-stack-${this.stack.node.addr}`;\n    let edgeStack = stage.node.tryFindChild(edgeStackId) as Stack;\n    if (!edgeStack) {\n      edgeStack = new Stack(stage, edgeStackId, {\n        env: {\n          region: EdgeFunction.EDGE_REGION,\n          account: Stack.of(this).account,\n        },\n      });\n    }\n    this.stack.addDependency(edgeStack);\n    return edgeStack;\n  }\n}\n\n/** Result of creating an in-region or cross-region function */\ninterface FunctionConfig {\n  readonly edgeFunction: lambda.Function;\n  readonly edgeArn: string;\n}\n\nfunction addEdgeLambdaToRoleTrustStatement(role: iam.IRole) {\n  if (role instanceof iam.Role && role.assumeRolePolicy) {\n    const statement = new iam.PolicyStatement();\n    const edgeLambdaServicePrincipal = new iam.ServicePrincipal('edgelambda.amazonaws.com');\n    statement.addPrincipals(edgeLambdaServicePrincipal);\n    statement.addActions(edgeLambdaServicePrincipal.assumeRoleAction);\n    role.assumeRolePolicy.addStatements(statement);\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
