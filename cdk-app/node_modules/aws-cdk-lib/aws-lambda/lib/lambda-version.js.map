{
  "version": 3,
  "sources": ["lambda-version.ts"],
  "sourcesContent": ["import * as cloudwatch from '../../aws-cloudwatch';\nimport { Fn, Lazy, RemovalPolicy } from '../../core';\nimport { Construct } from 'constructs';\nimport { Alias, AliasOptions } from './alias';\nimport { Architecture } from './architecture';\nimport { EventInvokeConfigOptions } from './event-invoke-config';\nimport { Function } from './function';\nimport { IFunction, QualifiedFunctionBase } from './function-base';\nimport { CfnVersion } from './lambda.generated';\nimport { addAlias } from './util';\n\nexport interface IVersion extends IFunction {\n  /**\n   * The most recently deployed version of this function.\n   * @attribute\n   */\n  readonly version: string;\n\n  /**\n   * The underlying AWS Lambda function.\n   */\n  readonly lambda: IFunction;\n\n  /**\n   * The ARN of the version for Lambda@Edge.\n   */\n  readonly edgeArn: string;\n\n  /**\n   * Defines an alias for this version.\n   * @param aliasName The name of the alias\n   * @param options Alias options\n   */\n  addAlias(aliasName: string, options?: AliasOptions): Alias;\n}\n\n/**\n * Options for `lambda.Version`\n */\nexport interface VersionOptions extends EventInvokeConfigOptions {\n  /**\n   * SHA256 of the version of the Lambda source code\n   *\n   * Specify to validate that you're deploying the right version.\n   *\n   * @default No validation is performed\n   */\n  readonly codeSha256?: string;\n\n  /**\n   * Description of the version\n   *\n   * @default Description of the Lambda\n   */\n  readonly description?: string;\n\n  /**\n   * Specifies a provisioned concurrency configuration for a function's version.\n   *\n   * @default No provisioned concurrency\n   */\n  readonly provisionedConcurrentExecutions?: number;\n\n  /**\n   * Whether to retain old versions of this function when a new version is\n   * created.\n   *\n   * @default RemovalPolicy.DESTROY\n   */\n  readonly removalPolicy?: RemovalPolicy;\n}\n\n/**\n * Properties for a new Lambda version\n */\nexport interface VersionProps extends VersionOptions {\n  /**\n   * Function to get the value of\n   */\n  readonly lambda: IFunction;\n}\n\nexport interface VersionAttributes {\n  /**\n   * The version.\n   */\n  readonly version: string;\n\n  /**\n   * The lambda function.\n   */\n  readonly lambda: IFunction;\n}\n\n/**\n * A single newly-deployed version of a Lambda function.\n *\n * This object exists to--at deploy time--query the \"then-current\" version of\n * the Lambda function that it refers to. This Version object can then be\n * used in `Alias` to refer to a particular deployment of a Lambda.\n *\n * This means that for every new update you deploy to your Lambda (using the\n * CDK and Aliases), you must always create a new Version object. In\n * particular, it must have a different name, so that a new resource is\n * created.\n *\n * If you want to ensure that you're associating the right version with\n * the right deployment, specify the `codeSha256` property while\n * creating the `Version.\n */\nexport class Version extends QualifiedFunctionBase implements IVersion {\n\n  /**\n   * Construct a Version object from a Version ARN.\n   *\n   * @param scope The cdk scope creating this resource\n   * @param id The cdk id of this resource\n   * @param versionArn The version ARN to create this version from\n   */\n  public static fromVersionArn(scope: Construct, id: string, versionArn: string): IVersion {\n    const version = extractQualifierFromArn(versionArn);\n    const lambda = Function.fromFunctionArn(scope, `${id}Function`, versionArn);\n\n    class Import extends QualifiedFunctionBase implements IVersion {\n      public readonly version = version;\n      public readonly lambda = lambda;\n      public readonly functionName = `${lambda.functionName}:${version}`;\n      public readonly functionArn = versionArn;\n      public readonly grantPrincipal = lambda.grantPrincipal;\n      public readonly role = lambda.role;\n      public readonly architecture = lambda.architecture;\n\n      protected readonly qualifier = version;\n      protected readonly canCreatePermissions = this._isStackAccount();\n\n      public addAlias(name: string, opts: AliasOptions = {}): Alias {\n        return addAlias(this, this, name, opts);\n      }\n\n      public get edgeArn(): string {\n        if (version === '$LATEST') {\n          throw new Error('$LATEST function version cannot be used for Lambda@Edge');\n        }\n        return this.functionArn;\n      }\n    }\n    return new Import(scope, id);\n  }\n\n  public static fromVersionAttributes(scope: Construct, id: string, attrs: VersionAttributes): IVersion {\n    class Import extends QualifiedFunctionBase implements IVersion {\n      public readonly version = attrs.version;\n      public readonly lambda = attrs.lambda;\n      public readonly functionName = `${attrs.lambda.functionName}:${attrs.version}`;\n      public readonly functionArn = `${attrs.lambda.functionArn}:${attrs.version}`;\n      public readonly grantPrincipal = attrs.lambda.grantPrincipal;\n      public readonly role = attrs.lambda.role;\n      public readonly architecture = attrs.lambda.architecture;\n\n      protected readonly qualifier = attrs.version;\n      protected readonly canCreatePermissions = this._isStackAccount();\n\n      public addAlias(name: string, opts: AliasOptions = {}): Alias {\n        return addAlias(this, this, name, opts);\n      }\n\n      public get edgeArn(): string {\n        if (attrs.version === '$LATEST') {\n          throw new Error('$LATEST function version cannot be used for Lambda@Edge');\n        }\n        return this.functionArn;\n      }\n    }\n    return new Import(scope, id);\n  }\n\n  public readonly version: string;\n  public readonly lambda: IFunction;\n  public readonly functionArn: string;\n  public readonly functionName: string;\n  public readonly architecture: Architecture;\n\n  protected readonly qualifier: string;\n  protected readonly canCreatePermissions = true;\n\n  constructor(scope: Construct, id: string, props: VersionProps) {\n    super(scope, id);\n\n    this.lambda = props.lambda;\n    this.architecture = props.lambda.architecture;\n\n    const version = new CfnVersion(this, 'Resource', {\n      codeSha256: props.codeSha256,\n      description: props.description,\n      functionName: props.lambda.functionName,\n      provisionedConcurrencyConfig: this.determineProvisionedConcurrency(props),\n    });\n\n    if (props.removalPolicy) {\n      version.applyRemovalPolicy(props.removalPolicy, {\n        default: RemovalPolicy.DESTROY,\n      });\n    }\n\n    this.version = version.attrVersion;\n    this.functionArn = version.ref;\n    this.functionName = `${this.lambda.functionName}:${this.version}`;\n    this.qualifier = version.attrVersion;\n\n    if (props.onFailure || props.onSuccess || props.maxEventAge || props.retryAttempts !== undefined) {\n      this.configureAsyncInvoke({\n        onFailure: props.onFailure,\n        onSuccess: props.onSuccess,\n        maxEventAge: props.maxEventAge,\n        retryAttempts: props.retryAttempts,\n      });\n    }\n  }\n\n  public get grantPrincipal() {\n    return this.lambda.grantPrincipal;\n  }\n\n  public get role() {\n    return this.lambda.role;\n  }\n\n  public metric(metricName: string, props: cloudwatch.MetricOptions = {}): cloudwatch.Metric {\n    // Metrics on Aliases need the \"bare\" function name, and the alias' ARN, this differs from the base behavior.\n    return super.metric(metricName, {\n      dimensions: {\n        FunctionName: this.lambda.functionName,\n        // construct the ARN from the underlying lambda so that alarms on an alias\n        // don't cause a circular dependency with CodeDeploy\n        // see: https://github.com/aws/aws-cdk/issues/2231\n        Resource: `${this.lambda.functionArn}:${this.version}`,\n      },\n      ...props,\n    });\n  }\n\n  /**\n   * Defines an alias for this version.\n   * @param aliasName The name of the alias (e.g. \"live\")\n   * @param options Alias options\n   */\n  public addAlias(aliasName: string, options: AliasOptions = {}): Alias {\n    return addAlias(this, this, aliasName, options);\n  }\n\n  public get edgeArn(): string {\n    // Validate first that this version can be used for Lambda@Edge\n    if (this.version === '$LATEST') {\n      throw new Error('$LATEST function version cannot be used for Lambda@Edge');\n    }\n\n    // Check compatibility at synthesis. It could be that the version was associated\n    // with a CloudFront distribution first and made incompatible afterwards.\n    return Lazy.string({\n      produce: () => {\n        // Validate that the underlying function can be used for Lambda@Edge\n        if (this.lambda instanceof Function) {\n          this.lambda._checkEdgeCompatibility();\n        }\n\n        return this.functionArn;\n      },\n    });\n  }\n\n  /**\n   * Validate that the provisionedConcurrentExecutions makes sense\n   *\n   * Member must have value greater than or equal to 1\n   */\n  private determineProvisionedConcurrency(props: VersionProps): CfnVersion.ProvisionedConcurrencyConfigurationProperty | undefined {\n    if (!props.provisionedConcurrentExecutions) {\n      return undefined;\n    }\n\n    if (props.provisionedConcurrentExecutions <= 0) {\n      throw new Error('provisionedConcurrentExecutions must have value greater than or equal to 1');\n    }\n\n    return { provisionedConcurrentExecutions: props.provisionedConcurrentExecutions };\n  }\n}\n\n/**\n * Given an opaque (token) ARN, returns a CloudFormation expression that extracts the\n * qualifier (= version or alias) from the ARN.\n *\n * Version ARNs look like this:\n *\n *   arn:aws:lambda:region:account-id:function:function-name:qualifier\n *\n * ..which means that in order to extract the `qualifier` component from the ARN, we can\n * split the ARN using \":\" and select the component in index 7.\n *\n * @returns `FnSelect(7, FnSplit(':', arn))`\n */\nexport function extractQualifierFromArn(arn: string) {\n  return Fn.select(7, Fn.split(':', arn));\n}\n"],
  "mappings": "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",
  "names": []
}
