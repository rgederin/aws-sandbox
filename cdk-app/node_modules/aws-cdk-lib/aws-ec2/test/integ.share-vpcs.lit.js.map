{
  "version": 3,
  "sources": ["integ.share-vpcs.lit.ts"],
  "sourcesContent": ["/// !cdk-integ *\nimport * as cdk from '../../core';\nimport { Construct } from 'constructs';\nimport * as ec2 from '../lib';\n\nconst app = new cdk.App();\n\ninterface ConstructThatTakesAVpcProps {\n  vpc: ec2.IVpc;\n}\n\nclass ConstructThatTakesAVpc extends Construct {\n  constructor(scope: Construct, id: string, _props: ConstructThatTakesAVpcProps) {\n    super(scope, id);\n\n    // new ec2.CfnInstance(this, 'Instance', {\n    //   subnetId: props.vpc.privateSubnets[0].subnetId,\n    //   imageId: new ec2.AmazonLinuxImage().getImage(this).imageId,\n    // });\n  }\n}\n\n/// !show\n/**\n * Stack1 creates the VPC\n */\nclass Stack1 extends cdk.Stack {\n  public readonly vpc: ec2.Vpc;\n\n  constructor(scope: cdk.App, id: string, props?: cdk.StackProps) {\n    super(scope, id, props);\n\n    this.vpc = new ec2.Vpc(this, 'VPC');\n  }\n}\n\ninterface Stack2Props extends cdk.StackProps {\n  vpc: ec2.IVpc;\n}\n\n/**\n * Stack2 consumes the VPC\n */\nclass Stack2 extends cdk.Stack {\n  constructor(scope: cdk.App, id: string, props: Stack2Props) {\n    super(scope, id, props);\n\n    // Pass the VPC to a construct that needs it\n    new ConstructThatTakesAVpc(this, 'Construct', {\n      vpc: props.vpc,\n    });\n  }\n}\n\nconst stack1 = new Stack1(app, 'Stack1');\nconst stack2 = new Stack2(app, 'Stack2', {\n  vpc: stack1.vpc,\n});\n/// !hide\n\nArray.isArray(stack2);\n\napp.synth();\n"],
  "mappings": "oEACA,KAAA,KAAA,QAAA,cACA,aAAA,QAAA,cACA,IAAA,QAAA,UAEM,IAAM,GAAI,KAAI,IAMpB,oCAAqC,cAAA,SAAS,CAC5C,YAAY,MAAkB,GAAY,OAAmC,CAC3E,MAAM,MAAO,KAajB,oBAAqB,KAAI,KAAK,CAG5B,YAAY,MAAgB,GAAY,MAAsB,CAC5D,MAAM,MAAO,GAAI,OAEjB,KAAK,IAAM,GAAI,KAAI,IAAI,KAAM,QAWjC,oBAAqB,KAAI,KAAK,CAC5B,YAAY,MAAgB,GAAY,MAAkB,CACxD,MAAM,MAAO,GAAI,OAGjB,GAAI,wBAAuB,KAAM,YAAa,CAC5C,IAAK,MAAM,OAKjB,KAAM,QAAS,GAAI,QAAO,IAAK,UACzB,OAAS,GAAI,QAAO,IAAK,SAAU,CACvC,IAAK,OAAO,MAId,MAAM,QAAQ,QAEd,IAAI",
  "names": []
}
