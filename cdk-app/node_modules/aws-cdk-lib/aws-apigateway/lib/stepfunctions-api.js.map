{
  "version": 3,
  "sources": ["stepfunctions-api.ts"],
  "sourcesContent": ["import * as iam from '../../aws-iam';\nimport * as sfn from '../../aws-stepfunctions';\nimport { Construct } from 'constructs';\nimport { RestApi, RestApiProps } from '.';\nimport { RequestContext } from './integrations';\nimport { StepFunctionsIntegration } from './integrations/stepfunctions';\nimport { Model } from './model';\n\n/**\n * Properties for StepFunctionsRestApi\n *\n */\nexport interface StepFunctionsRestApiProps extends RestApiProps {\n/**\n * The default State Machine that handles all requests from this API.\n *\n * This stateMachine will be used as a the default integration for all methods in\n * this API, unless specified otherwise in `addMethod`.\n */\n  readonly stateMachine: sfn.IStateMachine;\n\n  /**\n   * Which details of the incoming request must be passed onto the underlying state machine,\n   * such as, account id, user identity, request id, etc. The execution input will include a new key `requestContext`:\n   *\n   * {\n   *   \"body\": {},\n   *   \"requestContext\": {\n   *       \"key\": \"value\"\n   *   }\n   * }\n   *\n   * @default - all parameters within request context will be set as false\n   */\n  readonly requestContext?: RequestContext;\n\n  /**\n   * Check if querystring is to be included inside the execution input. The execution input will include a new key `queryString`:\n   *\n   * {\n   *   \"body\": {},\n   *   \"querystring\": {\n   *     \"key\": \"value\"\n   *   }\n   * }\n   *\n   * @default true\n   */\n  readonly querystring?: boolean;\n\n  /**\n   * Check if path is to be included inside the execution input. The execution input will include a new key `path`:\n   *\n   * {\n   *   \"body\": {},\n   *   \"path\": {\n   *     \"resourceName\": \"resourceValue\"\n   *   }\n   * }\n   *\n   * @default true\n   */\n  readonly path?: boolean;\n\n  /**\n   * Check if header is to be included inside the execution input. The execution input will include a new key `headers`:\n   *\n   * {\n   *   \"body\": {},\n   *   \"headers\": {\n   *      \"header1\": \"value\",\n   *      \"header2\": \"value\"\n   *   }\n   * }\n   * @default false\n   */\n  readonly headers?: boolean;\n}\n\n/**\n * Defines an API Gateway REST API with a Synchrounous Express State Machine as a proxy integration.\n */\nexport class StepFunctionsRestApi extends RestApi {\n  constructor(scope: Construct, id: string, props: StepFunctionsRestApiProps) {\n    if (props.defaultIntegration) {\n      throw new Error('Cannot specify \"defaultIntegration\" since Step Functions integration is automatically defined');\n    }\n\n    if ((props.stateMachine.node.defaultChild as sfn.CfnStateMachine).stateMachineType !== sfn.StateMachineType.EXPRESS) {\n      throw new Error('State Machine must be of type \"EXPRESS\". Please use StateMachineType.EXPRESS as the stateMachineType');\n    }\n\n    const stepfunctionsIntegration = StepFunctionsIntegration.startExecution(props.stateMachine, {\n      credentialsRole: role(scope, props),\n      requestContext: props.requestContext,\n      path: props.path?? true,\n      querystring: props.querystring?? true,\n      headers: props.headers,\n    });\n\n    super(scope, id, props);\n\n    this.root.addMethod('ANY', stepfunctionsIntegration, {\n      methodResponses: methodResponse(),\n    });\n  }\n}\n\n/**\n * Defines the IAM Role for API Gateway with required permissions\n * to invoke a synchronous execution for the provided state machine\n *\n * @param scope\n * @param props\n * @returns Role - IAM Role\n */\nfunction role(scope: Construct, props: StepFunctionsRestApiProps): iam.Role {\n  const roleName: string = 'StartSyncExecutionRole';\n  const apiRole = new iam.Role(scope, roleName, {\n    assumedBy: new iam.ServicePrincipal('apigateway.amazonaws.com'),\n  });\n\n  props.stateMachine.grantStartSyncExecution(apiRole);\n\n  return apiRole;\n}\n\n/**\n * Defines the method response modelfor each HTTP code response\n * @returns methodResponse\n */\nfunction methodResponse() {\n  return [\n    {\n      statusCode: '200',\n      responseModels: {\n        'application/json': Model.EMPTY_MODEL,\n      },\n    },\n    {\n      statusCode: '400',\n      responseModels: {\n        'application/json': Model.ERROR_MODEL,\n      },\n    },\n    {\n      statusCode: '500',\n      responseModels: {\n        'application/json': Model.ERROR_MODEL,\n      },\n    },\n  ];\n}"],
  "mappings": "2NAAA,IAAA,QAAA,iBACA,IAAA,QAAA,2BAEA,GAAA,QAAA,KAEA,gBAAA,QAAA,gCACA,QAAA,QAAA,WA4EA,kCAA0C,IAAA,OAAO,CAC/C,YAAY,MAAkB,GAAY,MAAgC,WACxE,uFAAI,MAAM,mBACR,KAAM,IAAI,OAAM,iGAGlB,GAAK,MAAM,aAAa,KAAK,aAAqC,mBAAqB,IAAI,iBAAiB,QAC1G,KAAM,IAAI,OAAM,wGAGlB,KAAM,0BAA2B,gBAAA,yBAAyB,eAAe,MAAM,aAAc,CAC3F,gBAAiB,KAAK,MAAO,OAC7B,eAAgB,MAAM,eACtB,KAAI,IAAE,MAAM,QAAI,MAAA,KAAA,OAAA,GAAG,GACnB,YAAW,IAAE,MAAM,eAAW,MAAA,KAAA,OAAA,GAAG,GACjC,QAAS,MAAM,UAGjB,MAAM,MAAO,GAAI,OAEjB,KAAK,KAAK,UAAU,MAAO,yBAA0B,CACnD,gBAAiB,oBArBvB,QAAA,qBAAA,6IAkCA,cAAc,MAAkB,MAAgC,CAC9D,KAAM,UAAmB,yBACnB,QAAU,GAAI,KAAI,KAAK,MAAO,SAAU,CAC5C,UAAW,GAAI,KAAI,iBAAiB,8BAGtC,aAAM,aAAa,wBAAwB,SAEpC,QAOT,yBAAuB,CACrB,MAAO,CACL,CACE,WAAY,MACZ,eAAgB,CACd,mBAAoB,QAAA,MAAM,cAG9B,CACE,WAAY,MACZ,eAAgB,CACd,mBAAoB,QAAA,MAAM,cAG9B,CACE,WAAY,MACZ,eAAgB,CACd,mBAAoB,QAAA,MAAM",
  "names": []
}
