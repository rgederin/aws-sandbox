{
  "version": 3,
  "sources": ["kubectl-provider.ts"],
  "sourcesContent": ["import * as path from 'path';\nimport * as iam from '../../aws-iam';\nimport * as lambda from '../../aws-lambda';\nimport { Duration, Stack, NestedStack, Names } from '../../core';\nimport * as cr from '../../custom-resources';\nimport { AwsCliLayer } from '../../lambda-layer-awscli';\nimport { KubectlLayer } from '../../lambda-layer-kubectl';\nimport { Construct, IConstruct } from 'constructs';\nimport { ICluster, Cluster } from './cluster';\n\n/**\n * Properties for a KubectlProvider\n */\nexport interface KubectlProviderProps {\n  /**\n   * The cluster to control.\n   */\n  readonly cluster: ICluster;\n}\n\n/**\n * Kubectl Provider Attributes\n */\nexport interface KubectlProviderAttributes {\n  /**\n   * The kubectl provider lambda arn\n   */\n  readonly functionArn: string;\n\n  /**\n   * The IAM role to assume in order to perform kubectl operations against this cluster.\n   */\n  readonly kubectlRoleArn: string;\n\n  /**\n   * The IAM execution role of the handler. This role must be able to assume kubectlRoleArn\n   */\n  readonly handlerRole: iam.IRole;\n}\n\n/**\n * Imported KubectlProvider that can be used in place of the default one created by CDK\n */\nexport interface IKubectlProvider extends IConstruct {\n  /**\n   * The custom resource provider's service token.\n   */\n  readonly serviceToken: string;\n\n  /**\n   * The IAM role to assume in order to perform kubectl operations against this cluster.\n   */\n  readonly roleArn: string;\n\n  /**\n   * The IAM execution role of the handler.\n   */\n  readonly handlerRole: iam.IRole;\n}\n\n/**\n * Implementation of Kubectl Lambda\n */\nexport class KubectlProvider extends NestedStack implements IKubectlProvider {\n\n  /**\n   * Take existing provider or create new based on cluster\n   *\n   * @param scope Construct\n   * @param cluster k8s cluster\n   */\n  public static getOrCreate(scope: Construct, cluster: ICluster) {\n    // if this is an \"owned\" cluster, it has a provider associated with it\n    if (cluster instanceof Cluster) {\n      return cluster._attachKubectlResourceScope(scope);\n    }\n\n    // if this is an imported cluster, it maybe has a predefined kubectl provider?\n    if (cluster.kubectlProvider) {\n      return cluster.kubectlProvider;\n    }\n\n    // if this is an imported cluster and there is no kubectl provider defined, we need to provision a custom resource provider in this stack\n    // we will define one per stack for each cluster based on the cluster uniqueid\n    const uid = `${Names.nodeUniqueId(cluster.node)}-KubectlProvider`;\n    const stack = Stack.of(scope);\n    let provider = stack.node.tryFindChild(uid) as KubectlProvider;\n    if (!provider) {\n      provider = new KubectlProvider(stack, uid, { cluster });\n    }\n\n    return provider;\n  }\n\n  /**\n   * Import an existing provider\n   *\n   * @param scope Construct\n   * @param id an id of resource\n   * @param attrs attributes for the provider\n   */\n  public static fromKubectlProviderAttributes(scope: Construct, id: string, attrs: KubectlProviderAttributes): IKubectlProvider {\n    return new ImportedKubectlProvider(scope, id, attrs);\n  }\n\n  /**\n   * The custom resource provider's service token.\n   */\n  public readonly serviceToken: string;\n\n  /**\n   * The IAM role to assume in order to perform kubectl operations against this cluster.\n   */\n  public readonly roleArn: string;\n\n  /**\n   * The IAM execution role of the handler.\n   */\n  public readonly handlerRole: iam.IRole;\n\n  public constructor(scope: Construct, id: string, props: KubectlProviderProps) {\n    super(scope, id);\n\n    const cluster = props.cluster;\n\n    if (!cluster.kubectlRole) {\n      throw new Error('\"kubectlRole\" is not defined, cannot issue kubectl commands against this cluster');\n    }\n\n    if (cluster.kubectlPrivateSubnets && !cluster.kubectlSecurityGroup) {\n      throw new Error('\"kubectlSecurityGroup\" is required if \"kubectlSubnets\" is specified');\n    }\n\n    const memorySize = cluster.kubectlMemory ? cluster.kubectlMemory.toMebibytes() : 1024;\n\n    const handler = new lambda.Function(this, 'Handler', {\n      code: lambda.Code.fromAsset(path.join(__dirname, 'kubectl-handler')),\n      runtime: lambda.Runtime.PYTHON_3_7,\n      handler: 'index.handler',\n      timeout: Duration.minutes(15),\n      description: 'onEvent handler for EKS kubectl resource provider',\n      memorySize,\n      environment: cluster.kubectlEnvironment,\n      role: cluster.kubectlLambdaRole ? cluster.kubectlLambdaRole : undefined,\n\n      // defined only when using private access\n      vpc: cluster.kubectlPrivateSubnets ? cluster.vpc : undefined,\n      securityGroups: cluster.kubectlSecurityGroup ? [cluster.kubectlSecurityGroup] : undefined,\n      vpcSubnets: cluster.kubectlPrivateSubnets ? { subnets: cluster.kubectlPrivateSubnets } : undefined,\n    });\n\n    // allow user to customize the layer\n    if (!props.cluster.kubectlLayer) {\n      handler.addLayers(new AwsCliLayer(this, 'AwsCliLayer'));\n      handler.addLayers(new KubectlLayer(this, 'KubectlLayer'));\n    } else {\n      handler.addLayers(props.cluster.kubectlLayer);\n    }\n\n    this.handlerRole = handler.role!;\n\n    this.handlerRole.addToPrincipalPolicy(new iam.PolicyStatement({\n      actions: ['eks:DescribeCluster'],\n      resources: [cluster.clusterArn],\n    }));\n\n    // For OCI helm chart authorization.\n    this.handlerRole.addManagedPolicy(\n      iam.ManagedPolicy.fromAwsManagedPolicyName('AmazonEC2ContainerRegistryReadOnly'),\n    );\n\n    // allow this handler to assume the kubectl role\n    cluster.kubectlRole.grant(this.handlerRole, 'sts:AssumeRole');\n\n    const provider = new cr.Provider(this, 'Provider', {\n      onEventHandler: handler,\n      vpc: cluster.kubectlPrivateSubnets ? cluster.vpc : undefined,\n      vpcSubnets: cluster.kubectlPrivateSubnets ? { subnets: cluster.kubectlPrivateSubnets } : undefined,\n      securityGroups: cluster.kubectlSecurityGroup ? [cluster.kubectlSecurityGroup] : undefined,\n    });\n\n    this.serviceToken = provider.serviceToken;\n    this.roleArn = cluster.kubectlRole.roleArn;\n  }\n\n}\n\nclass ImportedKubectlProvider extends Construct implements IKubectlProvider {\n\n  /**\n   * The custom resource provider's service token.\n   */\n  public readonly serviceToken: string;\n\n  /**\n   * The IAM role to assume in order to perform kubectl operations against this cluster.\n   */\n  public readonly roleArn: string;\n\n  /**\n   * The IAM execution role of the handler.\n   */\n  public readonly handlerRole: iam.IRole;\n\n  constructor(scope: Construct, id: string, props: KubectlProviderAttributes) {\n    super(scope, id);\n\n    this.serviceToken = props.functionArn;\n    this.roleArn = props.kubectlRoleArn;\n    this.handlerRole = props.handlerRole;\n  }\n}\n"],
  "mappings": "sNAAA,KAAA,QAAA,QACA,IAAA,QAAA,iBACA,OAAA,QAAA,oBACA,OAAA,QAAA,cACA,GAAA,QAAA,0BACA,sBAAA,QAAA,6BACA,uBAAA,QAAA,8BACA,aAAA,QAAA,cACA,UAAA,QAAA,aAuDA,6BAAqC,QAAA,WAAW,CAyD9C,YAAmB,MAAkB,GAAY,MAA2B,CAC1E,MAAM,MAAO,4EAEb,KAAM,SAAU,MAAM,QAEtB,GAAI,CAAC,QAAQ,YACX,KAAM,IAAI,OAAM,oFAGlB,GAAI,QAAQ,uBAAyB,CAAC,QAAQ,qBAC5C,KAAM,IAAI,OAAM,uEAGlB,KAAM,YAAa,QAAQ,cAAgB,QAAQ,cAAc,cAAgB,KAE3E,QAAU,GAAI,QAAO,SAAS,KAAM,UAAW,CACnD,KAAM,OAAO,KAAK,UAAU,KAAK,KAAK,UAAW,oBACjD,QAAS,OAAO,QAAQ,WACxB,QAAS,gBACT,QAAS,OAAA,SAAS,QAAQ,IAC1B,YAAa,oDACb,WACA,YAAa,QAAQ,mBACrB,KAAM,QAAQ,kBAAoB,QAAQ,kBAAoB,OAG9D,IAAK,QAAQ,sBAAwB,QAAQ,IAAM,OACnD,eAAgB,QAAQ,qBAAuB,CAAC,QAAQ,sBAAwB,OAChF,WAAY,QAAQ,sBAAwB,CAAE,QAAS,QAAQ,uBAA0B,SAI3F,AAAK,MAAM,QAAQ,aAIjB,QAAQ,UAAU,MAAM,QAAQ,cAHhC,SAAQ,UAAU,GAAI,uBAAA,YAAY,KAAM,gBACxC,QAAQ,UAAU,GAAI,wBAAA,aAAa,KAAM,kBAK3C,KAAK,YAAc,QAAQ,KAE3B,KAAK,YAAY,qBAAqB,GAAI,KAAI,gBAAgB,CAC5D,QAAS,CAAC,uBACV,UAAW,CAAC,QAAQ,eAItB,KAAK,YAAY,iBACf,IAAI,cAAc,yBAAyB,uCAI7C,QAAQ,YAAY,MAAM,KAAK,YAAa,kBAE5C,KAAM,UAAW,GAAI,IAAG,SAAS,KAAM,WAAY,CACjD,eAAgB,QAChB,IAAK,QAAQ,sBAAwB,QAAQ,IAAM,OACnD,WAAY,QAAQ,sBAAwB,CAAE,QAAS,QAAQ,uBAA0B,OACzF,eAAgB,QAAQ,qBAAuB,CAAC,QAAQ,sBAAwB,SAGlF,KAAK,aAAe,SAAS,aAC7B,KAAK,QAAU,QAAQ,YAAY,cA/GvB,aAAY,MAAkB,QAAiB,CAE3D,iEAAI,kBAAmB,WAAA,QACrB,MAAO,SAAQ,4BAA4B,OAI7C,GAAI,QAAQ,gBACV,MAAO,SAAQ,gBAKjB,KAAM,KAAM,GAAG,OAAA,MAAM,aAAa,QAAQ,wBACpC,MAAQ,OAAA,MAAM,GAAG,OACvB,GAAI,UAAW,MAAM,KAAK,aAAa,KACvC,MAAK,WACH,UAAW,GAAI,iBAAgB,MAAO,IAAK,CAAE,WAGxC,eAUK,+BAA8B,MAAkB,GAAY,MAAgC,qFACjG,GAAI,yBAAwB,MAAO,GAAI,QAvClD,QAAA,gBAAA,uHA4HA,qCAAsC,cAAA,SAAS,CAiB7C,YAAY,MAAkB,GAAY,MAAgC,CACxE,MAAM,MAAO,IAEb,KAAK,aAAe,MAAM,YAC1B,KAAK,QAAU,MAAM,eACrB,KAAK,YAAc,MAAM",
  "names": []
}
