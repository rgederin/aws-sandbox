{
  "version": 3,
  "sources": ["index.ts"],
  "sourcesContent": ["/* eslint-disable no-console */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { IsCompleteResponse } from '../../../custom-resources/lib/provider-framework/types';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport * as aws from 'aws-sdk';\nimport { ClusterResourceHandler } from './cluster';\nimport { EksClient } from './common';\nimport * as consts from './consts';\nimport { FargateProfileResourceHandler } from './fargate';\n\n// eslint-disable-next-line @typescript-eslint/no-require-imports, import/no-extraneous-dependencies\nconst ProxyAgent = require('proxy-agent');\n\naws.config.logger = console;\naws.config.update({\n  httpOptions: { agent: new ProxyAgent() },\n});\n\nlet eks: aws.EKS | undefined;\n\nconst defaultEksClient: EksClient = {\n  createCluster: req => getEksClient().createCluster(req).promise(),\n  deleteCluster: req => getEksClient().deleteCluster(req).promise(),\n  describeCluster: req => getEksClient().describeCluster(req).promise(),\n  describeUpdate: req => getEksClient().describeUpdate(req).promise(),\n  updateClusterConfig: req => getEksClient().updateClusterConfig(req).promise(),\n  updateClusterVersion: req => getEksClient().updateClusterVersion(req).promise(),\n  createFargateProfile: req => getEksClient().createFargateProfile(req).promise(),\n  deleteFargateProfile: req => getEksClient().deleteFargateProfile(req).promise(),\n  describeFargateProfile: req => getEksClient().describeFargateProfile(req).promise(),\n  configureAssumeRole: req => {\n    console.log(JSON.stringify({ assumeRole: req }, undefined, 2));\n    const creds = new aws.ChainableTemporaryCredentials({\n      params: req,\n    });\n\n    eks = new aws.EKS({ credentials: creds });\n  },\n};\n\nfunction getEksClient() {\n  if (!eks) {\n    throw new Error('EKS client not initialized (call \"configureAssumeRole\")');\n  }\n\n  return eks;\n}\n\nexport async function onEvent(event: AWSLambda.CloudFormationCustomResourceEvent) {\n  const provider = createResourceHandler(event);\n  return provider.onEvent();\n}\n\nexport async function isComplete(event: AWSLambda.CloudFormationCustomResourceEvent): Promise<IsCompleteResponse> {\n  const provider = createResourceHandler(event);\n  return provider.isComplete();\n}\n\nfunction createResourceHandler(event: AWSLambda.CloudFormationCustomResourceEvent) {\n  switch (event.ResourceType) {\n    case consts.CLUSTER_RESOURCE_TYPE: return new ClusterResourceHandler(defaultEksClient, event);\n    case consts.FARGATE_PROFILE_RESOURCE_TYPE: return new FargateProfileResourceHandler(defaultEksClient, event);\n    default:\n      throw new Error(`Unsupported resource type \"${event.ResourceType}`);\n  }\n}\n"],
  "mappings": "8GAIA,KAAA,KAAA,QAAA,WACA,UAAA,QAAA,aAEA,OAAA,QAAA,YACA,UAAA,QAAA,aAGM,WAAa,QAAQ,eAE3B,IAAI,OAAO,OAAS,QACpB,IAAI,OAAO,OAAO,CAChB,YAAa,CAAE,MAAO,GAAI,eAG5B,GAAI,KAEJ,KAAM,kBAA8B,CAClC,cAAe,KAAO,eAAe,cAAc,KAAK,UACxD,cAAe,KAAO,eAAe,cAAc,KAAK,UACxD,gBAAiB,KAAO,eAAe,gBAAgB,KAAK,UAC5D,eAAgB,KAAO,eAAe,eAAe,KAAK,UAC1D,oBAAqB,KAAO,eAAe,oBAAoB,KAAK,UACpE,qBAAsB,KAAO,eAAe,qBAAqB,KAAK,UACtE,qBAAsB,KAAO,eAAe,qBAAqB,KAAK,UACtE,qBAAsB,KAAO,eAAe,qBAAqB,KAAK,UACtE,uBAAwB,KAAO,eAAe,uBAAuB,KAAK,UAC1E,oBAAqB,KAAM,CACzB,QAAQ,IAAI,KAAK,UAAU,CAAE,WAAY,KAAO,OAAW,IAC3D,KAAM,OAAQ,GAAI,KAAI,8BAA8B,CAClD,OAAQ,MAGV,IAAM,GAAI,KAAI,IAAI,CAAE,YAAa,UAIrC,uBAAqB,CACnB,GAAI,CAAC,IACH,KAAM,IAAI,OAAM,2DAGlB,MAAO,KAGF,uBAAuB,MAAkD,CAE9E,MAAO,AADU,uBAAsB,OACvB,UAFlB,QAAA,QAAA,QAKO,0BAA0B,MAAkD,CAEjF,MAAO,AADU,uBAAsB,OACvB,aAFlB,QAAA,WAAA,WAKA,+BAA+B,MAAkD,CAC/E,OAAQ,MAAM,kBACP,QAAO,sBAAuB,MAAO,IAAI,WAAA,uBAAuB,iBAAkB,WAClF,QAAO,8BAA+B,MAAO,IAAI,WAAA,8BAA8B,iBAAkB,eAEpG,KAAM,IAAI,OAAM,8BAA8B,MAAM",
  "names": []
}
